{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/deploy.png","path":"images/deploy.png","modified":0,"renderable":0},{"_id":"source/images/diff-1.png","path":"images/diff-1.png","modified":0,"renderable":0},{"_id":"source/images/diff-2.png","path":"images/diff-2.png","modified":0,"renderable":0},{"_id":"source/images/diff-3.png","path":"images/diff-3.png","modified":0,"renderable":0},{"_id":"source/images/diff-4.png","path":"images/diff-4.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/xymo.jpg","path":"images/xymo.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/debug.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522773439877},{"_id":"source/.DS_Store","hash":"2411fcaf7cdba11d4445fd8c8f799172a80fc6b5","modified":1523973102328},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1522773096532},{"_id":"themes/next/.DS_Store","hash":"4d3a4892f291036a82bbdc12572aeeee4a5a6c68","modified":1522774542865},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1522773096533},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1522773096532},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1522773096532},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1522773096533},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1522773096533},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1522773096533},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1522773096533},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1522773096534},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1522773096533},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1522773096534},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1522773096534},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1522773096535},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1522773096535},{"_id":"themes/next/_config.yml","hash":"e0dab11a858fd14ac3a4c7938bed1298be0937a5","modified":1522775429853},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1522773096559},{"_id":"source/_posts/Proxy-and-Reflect.md","hash":"98ad76893c4cd7ea39ccc1b7bb046e7d465acadc","modified":1522775964738},{"_id":"source/_posts/.DS_Store","hash":"ffefe1156d0de745726ca4db5d23d473a16a373f","modified":1523973102327},{"_id":"source/_posts/hello-world.md","hash":"5537026f267eee884310f3f7e75b99b51a112e8b","modified":1522779790682},{"_id":"source/_posts/前端路由实现.md","hash":"961642f05578816aab87837abbf639e0a1e950f2","modified":1523973531092},{"_id":"source/_posts/前端资源增量更新.md","hash":"bae86a53db9c2e9c08412829548f5e0afb4dfab2","modified":1523195724918},{"_id":"source/_posts/init-blog-by-hexo.md","hash":"565884ae8c7f61b1dc3ed35a90b02defbac6e545","modified":1522826966921},{"_id":"source/categories/index.md","hash":"6620b5b7f10064314e803e0bd22639a168f41c1c","modified":1522775650744},{"_id":"source/categories/.DS_Store","hash":"45673a8ec47535550c1655fb6f129816c4bf94f9","modified":1522775879491},{"_id":"source/images/.DS_Store","hash":"5d97e4835522c521bb6513267ef5c3eb236ae13b","modified":1523195376353},{"_id":"source/images/deploy.png","hash":"eb31034149bdbc81be2878ae2b12355ff83c5b53","modified":1522778166913},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1522773096525},{"_id":"source/tags/index.md","hash":"2aba73c2403a4b6e5bcf6d54a0e8dc33400f555d","modified":1522775575944},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1522773096526},{"_id":"themes/next/.git/index","hash":"bb729ad72df57a0e0851c5b80afcfcf198063bfb","modified":1522776139139},{"_id":"themes/next/.git/FETCH_HEAD","hash":"ce624c9bb83fb68d03f7928e7ac405f6c46fccfd","modified":1522773153125},{"_id":"themes/next/.git/COMMIT_EDITMSG","hash":"031e36a5ade76001f3ac87809a9029cd392abf57","modified":1522776139140},{"_id":"themes/next/.git/ORIG_HEAD","hash":"8d68aab3ed0ae7f4d76d6a1708ac38ba9c2e121d","modified":1522773153137},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1522772638547},{"_id":"themes/next/.git/packed-refs","hash":"b36019411d1e41c95c4164678503e991e1018788","modified":1522773096523},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1522773096532},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1522773096532},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1522773096532},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1522773096532},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1522773096535},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1522773096536},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1522773096536},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1522773096537},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1522773096537},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1522773096538},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1522773096538},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1522773096539},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1522773096539},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1522773096539},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1522773096539},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1522773096540},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1522773096540},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1522773096540},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1522773096540},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1522773096541},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1522773096542},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1522773096558},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1522773096558},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1522773096558},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1522773096558},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1522773096559},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1522773096559},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1522773096559},{"_id":"themes/next/source/.DS_Store","hash":"e52f93a45dc0bc3a179b45a93f4aa97d1e05744a","modified":1522774548035},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1522773096559},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1522773096560},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1522773096641},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1522773096641},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1522773096641},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522773096586},{"_id":"source/images/diff-1.png","hash":"e8d6f1d101a85fff473c598c0bb64dfc2c0093c1","modified":1523193661236},{"_id":"source/images/diff-2.png","hash":"b3182de7e07c79d235be4a0252fb95959b4d6079","modified":1523194209648},{"_id":"source/images/diff-3.png","hash":"8f80a69a72fedabbb2203d141d43be9b3c8bb087","modified":1523195062213},{"_id":"source/images/diff-4.png","hash":"f6be3a926247c58fc165d2d0a677313b77429114","modified":1523195090228},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1522772638547},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1522772638548},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1522772638547},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1522772638548},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1522772638548},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1522772638548},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1522772638548},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1522772638548},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1522772638548},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1522772638548},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1522772638549},{"_id":"themes/next/.git/logs/HEAD","hash":"c085c59e5ec05a57dcc0960588789c5491ff0e7c","modified":1522776139142},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1522773096541},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1522773096541},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1522773096542},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1522773096542},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1522773096543},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1522773096543},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1522773096544},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1522773096543},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1522773096543},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1522773096543},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1522773096544},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1522773096545},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1522773096545},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1522773096545},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1522773096545},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1522773096547},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1522773096547},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1522773096548},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1522773096554},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1522773096554},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1522773096555},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1522773096555},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1522773096555},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1522773096556},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1522773096556},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1522773096586},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1522773096586},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1522773096587},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1522773096587},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1522773096587},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1522773096588},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1522773096588},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1522773096588},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1522773096589},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1522773096589},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1522773096590},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1522773096589},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1522773096590},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1522773096589},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522773096590},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522773096590},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1522773096590},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1522773096591},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1522773096591},{"_id":"themes/next/source/images/xymo.jpg","hash":"c55bb51b19c5f018da61e08dfa3dd09886813687","modified":1522500314030},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1522773096560},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1522773096560},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1522773096561},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1522773096561},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1522773096561},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1522773096561},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1522773096561},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1522773096561},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1522773096562},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522773096548},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522773096548},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522773096578},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522773096579},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522773096579},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522773096585},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522773096585},{"_id":"themes/next/.git/objects/8e/243b6c992cfa66a83f13eb454f3d766618a71f","hash":"59fa8fa440c04adb7285ecd5c043fa2d0011f308","modified":1522776139141},{"_id":"themes/next/.git/objects/da/012d86397219e6ab77f7a99acdfe720040bf5d","hash":"bb6bafd5e99fa0c5cce825b4c6c0dcdbd979240e","modified":1522776139139},{"_id":"themes/next/.git/objects/82/a75f7de3115e862b3ec165545daa08d8852a1d","hash":"cf1b90322a1c8360f3cdde600cf52956b5066de2","modified":1522776139138},{"_id":"themes/next/.git/objects/e2/0312c4df46b33ea9fa4d0816841229b804853f","hash":"d70055e157374031a6c98d52e0e6aeff55e3f03b","modified":1522776139138},{"_id":"themes/next/.git/objects/45/ce57567d05feeb7c63bff9529cf6f3a3eda245","hash":"daad1dbd3879824411daf44bc407d2f70cbb0b12","modified":1522776139124},{"_id":"themes/next/.git/objects/fb/ec2f1f1c26aeacde47df062e3dd6c01dc745c3","hash":"d66a0696e3d03c3a0f36e842d1da204354bd3f4f","modified":1522776139126},{"_id":"themes/next/.git/refs/heads/master","hash":"40c01f89d0a9ebd0c158308e01bc7dff11dc6388","modified":1522776139141},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1522773096544},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1522773096544},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1522773096545},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1522773096546},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1522773096546},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1522773096546},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1522773096546},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1522773096547},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1522773096547},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1522773096548},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1522773096548},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1522773096548},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1522773096549},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1522773096549},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1522773096549},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1522773096549},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1522773096549},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1522773096550},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1522773096549},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1522773096550},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1522773096550},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1522773096550},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1522773096551},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1522773096551},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1522773096551},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1522773096551},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1522773096552},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1522773096552},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1522773096552},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1522773096553},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1522773096553},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1522773096553},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1522773096554},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1522773096553},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1522773096557},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1522773096557},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1522773096557},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1522773096558},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1522773096578},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1522773096578},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1522773096579},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1522773096579},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1522773096584},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1522773096585},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1522773096585},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1522773096585},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1522773096591},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1522773096591},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1522773096591},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1522773096592},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1522773096592},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1522773096592},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1522773096592},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1522773096593},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1522773096593},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1522773096593},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1522773096594},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1522773096597},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1522773096600},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1522773096601},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1522773096601},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1522773096601},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1522773096607},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1522773096607},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1522773096609},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1522773096607},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1522773096608},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1522773096608},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1522773096609},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1522773096609},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1522773096609},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1522773096623},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1522773096624},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1522773096625},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1522773096625},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1522773096625},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1522773096625},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1522773096626},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1522773096627},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1522773096627},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1522773096626},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1522773096627},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1522773096628},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1522773096628},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1522773096628},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1522773096628},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1522773096628},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1522773096628},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1522773096629},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1522773096629},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1522773096629},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1522773096629},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1522773096629},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1522773096630},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1522773096630},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1522773096630},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1522773096631},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1522773096631},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1522773096636},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1522773096636},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1522773096640},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1522773096640},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1522773096641},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1522773096624},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1522773096525},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"c085c59e5ec05a57dcc0960588789c5491ff0e7c","modified":1522776139142},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1522773096557},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1522773096557},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1522773096562},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1522773096563},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1522773096562},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1522773096563},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1522773096563},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1522773096566},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1522773096572},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1522773096577},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1522773096577},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1522773096577},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1522773096577},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1522773096578},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1522773096578},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1522773096579},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1522773096577},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1522773096580},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1522773096580},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1522773096580},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1522773096580},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1522773096581},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1522773096581},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1522773096581},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1522773096582},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1522773096582},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1522773096582},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1522773096582},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1522773096582},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1522773096583},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1522773096583},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1522773096583},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1522773096584},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1522773096584},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1522773096584},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1522773096593},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1522773096595},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1522773096597},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1522773096597},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1522773096602},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1522773096602},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1522773096603},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1522773096602},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1522773096603},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1522773096604},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1522773096606},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1522773096606},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1522773096607},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1522773096608},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1522773096608},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1522773096610},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1522773096610},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1522773096610},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1522773096635},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1522773096635},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1522773096596},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1522773096622},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1522773096623},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1522773096639},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"06807c8507739223aebe4617e1b15c0997d0f91c","modified":1522773096525},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1522773096563},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1522773096564},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1522773096564},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1522773096564},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1522773096564},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1522773096564},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1522773096564},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1522773096565},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1522773096565},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1522773096565},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1522773096565},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1522773096565},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1522773096566},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1522773096566},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1522773096566},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1522773096567},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1522773096566},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1522773096567},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1522773096567},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1522773096567},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1522773096567},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1522773096568},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1522773096568},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1522773096568},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1522773096569},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1522773096568},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1522773096569},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1522773096569},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1522773096569},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1522773096570},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1522773096570},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1522773096571},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1522773096570},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1522773096571},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1522773096572},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1522773096571},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1522773096571},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1522773096572},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1522773096572},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1522773096573},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1522773096573},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1522773096573},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1522773096573},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1522773096573},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1522773096574},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1522773096574},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1522773096574},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1522773096574},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1522773096575},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1522773096575},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1522773096575},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1522773096576},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1522773096575},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1522773096576},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1522773096576},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1522773096574},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1522773096576},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1522773096576},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1522773096581},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1522773096581},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1522773096583},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1522773096594},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1522773096594},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1522773096595},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1522773096595},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1522773096595},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1522773096604},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1522773096605},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1522773096605},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1522773096605},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1522773096605},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1522773096606},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1522773096612},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1522773096614},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1522773096620},{"_id":"themes/next/.git/objects/pack/pack-edeb1bf2099bc45e640e1969556e2c485b011f1c.idx","hash":"610509798d395d1396dc79f9e23efcba33f3d60f","modified":1522773096509},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1522773096600},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1522773096634},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1522773096617},{"_id":"themes/next/.git/objects/pack/pack-edeb1bf2099bc45e640e1969556e2c485b011f1c.pack","hash":"02ccb2ce54f81db89536aa4c50d22dd5cab525fe","modified":1522773096506}],"Category":[{"name":"JavaScript","_id":"cjg3qbjoc0003y4vsruh066xb"},{"name":"前端工程化","_id":"cjg3qbjok000by4vs2l26wv0a"}],"Data":[],"Page":[{"title":"categories","date":"2018-04-03T17:13:43.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-04-04 01:13:43\ntype: categories\n---\n","updated":"2018-04-03T17:14:10.744Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjg3qbjoa0001y4vsqkq5wsxb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-04-03T17:12:25.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-04-04 01:12:25\ntype: tags\n---\n","updated":"2018-04-03T17:12:55.944Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjg3qbjt6000ky4vs82r68k27","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Proxy and Reflect","date":"2018-04-03T17:15:35.000Z","_content":"\n# Proxy and Reflect\n\n**Reflect** 对象与 **Proxy** 对象都是是 ES6 为了操作对象而提供的新 API。\n> **Proxy** 的概述\n> \n> >从 **Proxy** 字面意思来理解更好，就是代理器的意思，**Proxy** 会代理你某些对 Object 的操作，你你这些对 Object 的操作都会经过 **Proxy** 过滤和处理。\n\n> **Reflect** 的概述\n> >**Reflect** 是一个内置的全局对象，它提供可拦截 `JavaScript`操作的方法。方法与**Proxy**的方法相同。**Reflect** 不是一个函数对象，因此它是不可构造的。与大多数全局对象不同，**Reflect**没有构造函数。您不能将其与一个 `new` 运算符一起使用，也不能将 **Reflect** 对象作为一个函数来调用。\n\n<!-- more -->\n\n## Proxy\n\nES6 原生提供 `Proxy` 构造函数，用来生成 `Proxy` 实例。\n\n```\nvar proxy = new Proxy(target, handler);\n```\nProxy 对象的所有用法，都是上面这种形式，不同的只是`handler`参数的写法。\n\n - `target`参数表示所要拦截的目标对象。\n - `handler`参数也是一个对象，用来定制拦截行为。\n\n下面是另一个拦截读取属性行为的例子。\n\n```\nvar target = {\n\tname: 'Tom',\n\tage: 20\n};\n\nvar proxy = new Proxy(target, {\n  get: function(target, property) {\n    return 1000;\n  }\n});\n\nproxy.name \t// 1000\nproxy.age \t// 1000\nproxy.title\t// 1000\n\ntarget.name \t// Tom\ntarget.age\t//\t20\ntarget.title // undefined\n```\n\n上面代码中，`handler`是一个配置对象, 在这里面配置你想要被代理的Object操作，每一个别被代理的操作都有个自己处理函数。上面的例子中配置对象有个`get`方法，用来拦截目标对象的属性访问操作。`get`方法有两个参数：`target`就是代理的那个对象，`property`是所要访问的目标对象的属性。这个拦截函数无论访问什么属性总是返回1000。\n\n通过上面两组数据的访问，可以看出要：**使得`Proxy`起作用，必须针对`Proxy`实例（上例是`proxy`对象）进行操作，而不是针对目标对象（上例是空对象）进行操作。**\n\n```\nvar target = {\n\tname: 'Tom',\n\tage: 20\n};\n\nvar hanler = {};\n\nvar proxy = new Proxy(target, hanler);\n\nproxy.name \t// Tom\nproxy.age \t// 20\nproxy.title\t// undefined\n\ntarget.name \t// Tom\ntarget.age\t//\t20\ntarget.title // undefined\n```\n\n**如果`handler`是一个空对象，没有任何拦截效果，访问`proxy`就等同于访问`target`。**\n\n\n\n### Proxy 实例的方法\n### get()\n\n`get`方法用于拦截某个属性的读取操作。\n\n```javascript\nvar person = {\n  name: 'Tom'\n};\n\nvar proxy = new Proxy(person, {\n  get: function(target, property) {\n    if (property in target) {\n      return target[property];\n    } else {\n      throw new ReferenceError(\"Property \\\"\" + property + \"\\\" does not exist.\");\n    }\n  }\n});\n\nproxy.name // Tom\nproxy.age  // Uncaught ReferenceError: Property \"age\" does not exist.\n```\n通过`Proxy`当访问对象没有定义的属性时不返回`undefined`，而是抛出错误。\n\n\n### set()\n\n`set`方法用来拦截某个属性的赋值操作。\n\n```javascript\nvar handler = {\n  get (target, key) {\n    invariant(key, 'get');\n    return target[key];\n  },\n  \n  set (target, key, value) {\n    invariant(key, 'set');\n    target[key] = value;\n    return true;\n  }\n};\n\nfunction invariant (key, action) {\n  if (key[0] === '_') {\n    throw new Error(`Invalid attempt to ${action} private \"${key}\" property`);\n  }\n}\nvar target = {};\nvar proxy = new Proxy(target, handler);\n\nproxy._prop\n// Error: Invalid attempt to get private \"_prop\" property\n\nproxy._prop = 'c'\n// Error: Invalid attempt to set private \"_prop\" property\n```\n\n上面代码中，`invariant`方法是一个判断是否为内部属性（以_开头命名的变量）的一个方法，如果是就抛出异常，通过`Proxy`的`set`和`get`方法可以实现禁止内部属性的读写。\n\n```\nvar handler = {\n  set (target, key, value) {\n  \ttarget[key] = value;\n    return true;\n  }\n};\n\nvar target = {\n\tname: 'Tom'\n};\n\nObject.defineProperty(target, 'name', {\n  configurable: false,\n  writable: false\n});\n\nvar proxy = new Proxy(target, handler);\n\nproxy.name = 'Jam'; \n// TypeError: 'set' on proxy: trap returned truish for property 'name' which exists in the proxy target as a non-configurable and non-writable data property with a different value\n\nproxy.name = 'Tom'; // Tom\n```\n\n**如果目标对象自身的某个属性，不可写也不可配置，那么`set`不得改变这个属性的值，只能返回同样的值，否则报错。**\n\n### apply()\n`apply`方法拦截函数的调用、`call`和`apply`操作。\n\n\n```javascript\nvar target = function () { return 'I am the target'; };\nvar handler = {\n  apply: function () {\n    return 'I am the proxy';\n  }\n};\n\nvar p = new Proxy(target, handler);\n\np()\n// \"I am the proxy\"\n```\n\n上面代码中，变量`p`是 Proxy 的实例，当它作为函数调用时（`p()`），就会被`apply`方法拦截，返回`I am the proxy`。\n\n## 实例：Web 服务的客户端\n\nProxy 对象可以拦截目标对象的任意属性，这使得它很合适用来写 Web 服务的客户端。\n\n```javascript\nconst service = createWebService('http://example.com/data');\n\nservice.employees().then(json => {\n  const employees = JSON.parse(json);\n  // ···\n});\n```\n\n上面代码新建了一个 Web 服务的接口，这个接口返回各种数据。Proxy 可以拦截这个对象的任意属性，所以不用为每一种数据写一个适配方法，只要写一个 Proxy 拦截就可以了。\n\n```javascript\nfunction createWebService(baseUrl) {\n  return new Proxy({}, {\n    get(target, propKey) {\n      return () => httpGet(baseUrl+'/' + propKey);\n    }\n  });\n}\n```\n\n##用ES5简单的实现一下Proxy\n\n```\n/**浅拷贝工具方法**/\nfunction shallowClone(source) {\n    if (!source || typeof source !== 'object') {\n        throw new Error('error arguments');\n    }\n    var targetObj = source.constructor === Array ? [] : {};\n    for (var keys in source) {\n        if (source.hasOwnProperty(keys)) {\n            targetObj[keys] = source[keys];\n        }\n    }\n    return targetObj;\n}\n\n/*代理实现*/\nfunction ProxyCopy(target,handle){\n  var targetCopy = shallowClone(target);\n  Object.keys(targetCopy).forEach(function(key){\n    Object.defineProperty(targetCopy, key, {\n      get: function() {\n        return handle.get && handle.get(target,key);\n      },\n      set: function(newVal) {\n        handle.set && handle.set();\n        target[key] = newVal;\n      }\n    });\n  })\n  return targetCopy;\n}\n\nvar person = {name:''};\nvar personCopy = new ProxyCopy(person,{\n  get(target,key){\n    console.log('get方法被拦截。。。');\n    return target[key];\n  },\n  set(target,key,value){\n    console.log('set方法被拦截。。。')\n    // return true;\n  }\n})\nperson.name = 'arvin';  // 未有拦截日志打出\npersonCopy.name = 'arvin';  // set方法被拦截。。。\nconsole.log(person.name);   // 未有拦截日志打出\nconsole.log(personCopy.name);   // get方法被拦截。。。\n\n```\n\n\n\n## Reflect\n\n（1） 将`Object`对象的一些明显属于语言内部的方法（比如`Object.defineProperty`），放到`Reflect`对象上。现阶段，某些方法同时在`Object`和`Reflect`对象上部署，未来的新方法将只部署在`Reflect`对象上。也就是说，从`Reflect`对象上可以拿到语言内部的方法。\n\n（2） 修改某些`Object`方法的返回结果，让其变得更合理。比如，`Object.defineProperty(obj, name, desc)`在无法定义属性时，会抛出一个错误，而`Reflect.defineProperty(obj, name, desc)`则会返回`false`。\n\n```\n// 老写法\ntry {\n  Object.defineProperty(target, property, attributes);\n  // success\n} catch (e) {\n  // failure\n}\n\n// 新写法\nif (Reflect.defineProperty(target, property, attributes)) {\n  // success\n} else {\n  // failure\n}\n```\n\n（3） 让`Object`操作都变成函数行为。某些`Object`操作是命令式，比如`name in obj`和`delete obj[name]`，而`Reflect.has(obj, name)`和`Reflect.deleteProperty(obj, name)`让它们变成了函数行为。\n\n```\n// 老写法\n'assign' in Object // true\n\n// 新写法\nReflect.has(Object, 'assign') // true\n```\n\n（4）`Reflect`对象的方法与`Proxy`对象的方法一一对应，只要是`Proxy`对象的方法，就能在`Reflect`对象上找到对应的方法。这就让`Proxy`对象可以方便地调用对应的`Reflect`方法，完成默认行为，作为修改行为的基础。也就是说，不管`Proxy`怎么修改默认行为，你总可以在`Reflect`上获取默认行为。\n\n```\nProxy(target, {\n  set: function(target, name, value, receiver) {\n    var success = Reflect.set(target,name, value, receiver);\n    if (success) {\n      log('property ' + name + ' on ' + target + ' set to ' + value);\n    }\n    return success;\n  }\n});\n```\n\n上面代码中，`Proxy`方法拦截`target`对象的属性赋值行为。它采用`Reflect.set`方法将值赋值给对象的属性，确保完成原有的行为，然后再部署额外的功能。\n\n下面是另一个例子。\n\n```\nvar loggedObj = new Proxy(obj, {\n  get(target, name) {\n    console.log('get', target, name);\n    return Reflect.get(target, name);\n  },\n  deleteProperty(target, name) {\n    console.log('delete' + name);\n    return Reflect.deleteProperty(target, name);\n  },\n  has(target, name) {\n    console.log('has' + name);\n    return Reflect.has(target, name);\n  }\n});\n```\n\n上面代码中，每一个`Proxy`对象的拦截操作（`get`、`delete`、`has`），内部都调用对应的`Reflect`方法，保证原生行为能够正常执行。添加的工作，就是将每一个操作输出一行日志。\n\n有了`Reflect`对象以后，很多操作会更易读。\n\n```\n// 老写法\nFunction.prototype.apply.call(Math.floor, undefined, [1.75]) // 1\n\n// 新写法\nReflect.apply(Math.floor, undefined, [1.75]) // 1\n```\n\n##Summary\n `Reflect`和`Proxy`中的方法一一对应，没有一一举例子，列举一下。\n \n- `get()` `set()` `has()` `deleteProperty()` `difineProperty()`//与属性有关的方法\n- `getOwnPropertyDescriptor()` `ownKeys()`//Own的属性描述和属性keys\n- `getPrototypeOf()` `setPrototypeOf()`//与原型有关的方法\n- `isExtensible()`判断是否可以扩展 preventExtensions()阻止添加新属性\n- `apply()`//调用方法有关\n- `construct()`//和new 有关的\n\n`Proxy`相当于去修改设置对象的属性行为，而`Reflect`则是获取对象的这些行为。\n\n###Proxy的特点\n>1.行为转发与状态同步\n\n>>代理的行为：将代理的所有内部方法转发至目标\n\n>2.proxy !== target\n\n>>```\nvar obj = {};\nvar proxy = new Proxy(obj, {});\nconsole.log(obj === proxy);  // false\nconsole.log(obj == proxy);  // false\n```\n\n>3.handler拦截\n\n>>可以通过handler对象重写内部方法，拦截并改变target的默认行为\n\n>>未被handler拦截（未在handler对象中重写）的内部方法会直接指向目标\n\n>4.代理关系可以解除\n\n>>代理可以解除，用Proxy.revocable(target, handler)创建返回Object { proxy: Object, revoke: revoke() }，调用revoke()解除代理关系，解除后访问代理对象会报错，例如：\n\n>>```\n// 解除代理关系\nvar rProxy = Proxy.revocable({}, {\n    set: function(target, key, value) {\n        return Reflect.set(target, key, 0);\n    }\n});\nvar p = rProxy.proxy;\np.a = 123;\nconsole.log(p.a);   // 0\n// 解除代理\nrProxy.revoke();\n// p.b = 213;  // 报错TypeError: illegal operation attempted on a revoked proxy\n```\n\n###Proxy的一些其他应用场景\n>1.防篡改对象\n>\n>2.分离校验逻辑\n\n>>setter/getter的优点，通过代理机制能将校验逻辑内置于属性访问行为中，比如可以校验逻辑放在这里面\n\n>3.记录对象访问\n>>主要用于测试/调试中，比如测试框架，通过代理机制可以全程记录一切\n\n>4.增强普通对象\n\n>>例如防篡改对象，在API设计方面有很大想象空间","source":"_posts/Proxy-and-Reflect.md","raw":"---\ntitle: Proxy and Reflect\ndate: 2018-04-04 01:15:35\ncategories:\n- JavaScript\ntags: \n- ES6\n\n---\n\n# Proxy and Reflect\n\n**Reflect** 对象与 **Proxy** 对象都是是 ES6 为了操作对象而提供的新 API。\n> **Proxy** 的概述\n> \n> >从 **Proxy** 字面意思来理解更好，就是代理器的意思，**Proxy** 会代理你某些对 Object 的操作，你你这些对 Object 的操作都会经过 **Proxy** 过滤和处理。\n\n> **Reflect** 的概述\n> >**Reflect** 是一个内置的全局对象，它提供可拦截 `JavaScript`操作的方法。方法与**Proxy**的方法相同。**Reflect** 不是一个函数对象，因此它是不可构造的。与大多数全局对象不同，**Reflect**没有构造函数。您不能将其与一个 `new` 运算符一起使用，也不能将 **Reflect** 对象作为一个函数来调用。\n\n<!-- more -->\n\n## Proxy\n\nES6 原生提供 `Proxy` 构造函数，用来生成 `Proxy` 实例。\n\n```\nvar proxy = new Proxy(target, handler);\n```\nProxy 对象的所有用法，都是上面这种形式，不同的只是`handler`参数的写法。\n\n - `target`参数表示所要拦截的目标对象。\n - `handler`参数也是一个对象，用来定制拦截行为。\n\n下面是另一个拦截读取属性行为的例子。\n\n```\nvar target = {\n\tname: 'Tom',\n\tage: 20\n};\n\nvar proxy = new Proxy(target, {\n  get: function(target, property) {\n    return 1000;\n  }\n});\n\nproxy.name \t// 1000\nproxy.age \t// 1000\nproxy.title\t// 1000\n\ntarget.name \t// Tom\ntarget.age\t//\t20\ntarget.title // undefined\n```\n\n上面代码中，`handler`是一个配置对象, 在这里面配置你想要被代理的Object操作，每一个别被代理的操作都有个自己处理函数。上面的例子中配置对象有个`get`方法，用来拦截目标对象的属性访问操作。`get`方法有两个参数：`target`就是代理的那个对象，`property`是所要访问的目标对象的属性。这个拦截函数无论访问什么属性总是返回1000。\n\n通过上面两组数据的访问，可以看出要：**使得`Proxy`起作用，必须针对`Proxy`实例（上例是`proxy`对象）进行操作，而不是针对目标对象（上例是空对象）进行操作。**\n\n```\nvar target = {\n\tname: 'Tom',\n\tage: 20\n};\n\nvar hanler = {};\n\nvar proxy = new Proxy(target, hanler);\n\nproxy.name \t// Tom\nproxy.age \t// 20\nproxy.title\t// undefined\n\ntarget.name \t// Tom\ntarget.age\t//\t20\ntarget.title // undefined\n```\n\n**如果`handler`是一个空对象，没有任何拦截效果，访问`proxy`就等同于访问`target`。**\n\n\n\n### Proxy 实例的方法\n### get()\n\n`get`方法用于拦截某个属性的读取操作。\n\n```javascript\nvar person = {\n  name: 'Tom'\n};\n\nvar proxy = new Proxy(person, {\n  get: function(target, property) {\n    if (property in target) {\n      return target[property];\n    } else {\n      throw new ReferenceError(\"Property \\\"\" + property + \"\\\" does not exist.\");\n    }\n  }\n});\n\nproxy.name // Tom\nproxy.age  // Uncaught ReferenceError: Property \"age\" does not exist.\n```\n通过`Proxy`当访问对象没有定义的属性时不返回`undefined`，而是抛出错误。\n\n\n### set()\n\n`set`方法用来拦截某个属性的赋值操作。\n\n```javascript\nvar handler = {\n  get (target, key) {\n    invariant(key, 'get');\n    return target[key];\n  },\n  \n  set (target, key, value) {\n    invariant(key, 'set');\n    target[key] = value;\n    return true;\n  }\n};\n\nfunction invariant (key, action) {\n  if (key[0] === '_') {\n    throw new Error(`Invalid attempt to ${action} private \"${key}\" property`);\n  }\n}\nvar target = {};\nvar proxy = new Proxy(target, handler);\n\nproxy._prop\n// Error: Invalid attempt to get private \"_prop\" property\n\nproxy._prop = 'c'\n// Error: Invalid attempt to set private \"_prop\" property\n```\n\n上面代码中，`invariant`方法是一个判断是否为内部属性（以_开头命名的变量）的一个方法，如果是就抛出异常，通过`Proxy`的`set`和`get`方法可以实现禁止内部属性的读写。\n\n```\nvar handler = {\n  set (target, key, value) {\n  \ttarget[key] = value;\n    return true;\n  }\n};\n\nvar target = {\n\tname: 'Tom'\n};\n\nObject.defineProperty(target, 'name', {\n  configurable: false,\n  writable: false\n});\n\nvar proxy = new Proxy(target, handler);\n\nproxy.name = 'Jam'; \n// TypeError: 'set' on proxy: trap returned truish for property 'name' which exists in the proxy target as a non-configurable and non-writable data property with a different value\n\nproxy.name = 'Tom'; // Tom\n```\n\n**如果目标对象自身的某个属性，不可写也不可配置，那么`set`不得改变这个属性的值，只能返回同样的值，否则报错。**\n\n### apply()\n`apply`方法拦截函数的调用、`call`和`apply`操作。\n\n\n```javascript\nvar target = function () { return 'I am the target'; };\nvar handler = {\n  apply: function () {\n    return 'I am the proxy';\n  }\n};\n\nvar p = new Proxy(target, handler);\n\np()\n// \"I am the proxy\"\n```\n\n上面代码中，变量`p`是 Proxy 的实例，当它作为函数调用时（`p()`），就会被`apply`方法拦截，返回`I am the proxy`。\n\n## 实例：Web 服务的客户端\n\nProxy 对象可以拦截目标对象的任意属性，这使得它很合适用来写 Web 服务的客户端。\n\n```javascript\nconst service = createWebService('http://example.com/data');\n\nservice.employees().then(json => {\n  const employees = JSON.parse(json);\n  // ···\n});\n```\n\n上面代码新建了一个 Web 服务的接口，这个接口返回各种数据。Proxy 可以拦截这个对象的任意属性，所以不用为每一种数据写一个适配方法，只要写一个 Proxy 拦截就可以了。\n\n```javascript\nfunction createWebService(baseUrl) {\n  return new Proxy({}, {\n    get(target, propKey) {\n      return () => httpGet(baseUrl+'/' + propKey);\n    }\n  });\n}\n```\n\n##用ES5简单的实现一下Proxy\n\n```\n/**浅拷贝工具方法**/\nfunction shallowClone(source) {\n    if (!source || typeof source !== 'object') {\n        throw new Error('error arguments');\n    }\n    var targetObj = source.constructor === Array ? [] : {};\n    for (var keys in source) {\n        if (source.hasOwnProperty(keys)) {\n            targetObj[keys] = source[keys];\n        }\n    }\n    return targetObj;\n}\n\n/*代理实现*/\nfunction ProxyCopy(target,handle){\n  var targetCopy = shallowClone(target);\n  Object.keys(targetCopy).forEach(function(key){\n    Object.defineProperty(targetCopy, key, {\n      get: function() {\n        return handle.get && handle.get(target,key);\n      },\n      set: function(newVal) {\n        handle.set && handle.set();\n        target[key] = newVal;\n      }\n    });\n  })\n  return targetCopy;\n}\n\nvar person = {name:''};\nvar personCopy = new ProxyCopy(person,{\n  get(target,key){\n    console.log('get方法被拦截。。。');\n    return target[key];\n  },\n  set(target,key,value){\n    console.log('set方法被拦截。。。')\n    // return true;\n  }\n})\nperson.name = 'arvin';  // 未有拦截日志打出\npersonCopy.name = 'arvin';  // set方法被拦截。。。\nconsole.log(person.name);   // 未有拦截日志打出\nconsole.log(personCopy.name);   // get方法被拦截。。。\n\n```\n\n\n\n## Reflect\n\n（1） 将`Object`对象的一些明显属于语言内部的方法（比如`Object.defineProperty`），放到`Reflect`对象上。现阶段，某些方法同时在`Object`和`Reflect`对象上部署，未来的新方法将只部署在`Reflect`对象上。也就是说，从`Reflect`对象上可以拿到语言内部的方法。\n\n（2） 修改某些`Object`方法的返回结果，让其变得更合理。比如，`Object.defineProperty(obj, name, desc)`在无法定义属性时，会抛出一个错误，而`Reflect.defineProperty(obj, name, desc)`则会返回`false`。\n\n```\n// 老写法\ntry {\n  Object.defineProperty(target, property, attributes);\n  // success\n} catch (e) {\n  // failure\n}\n\n// 新写法\nif (Reflect.defineProperty(target, property, attributes)) {\n  // success\n} else {\n  // failure\n}\n```\n\n（3） 让`Object`操作都变成函数行为。某些`Object`操作是命令式，比如`name in obj`和`delete obj[name]`，而`Reflect.has(obj, name)`和`Reflect.deleteProperty(obj, name)`让它们变成了函数行为。\n\n```\n// 老写法\n'assign' in Object // true\n\n// 新写法\nReflect.has(Object, 'assign') // true\n```\n\n（4）`Reflect`对象的方法与`Proxy`对象的方法一一对应，只要是`Proxy`对象的方法，就能在`Reflect`对象上找到对应的方法。这就让`Proxy`对象可以方便地调用对应的`Reflect`方法，完成默认行为，作为修改行为的基础。也就是说，不管`Proxy`怎么修改默认行为，你总可以在`Reflect`上获取默认行为。\n\n```\nProxy(target, {\n  set: function(target, name, value, receiver) {\n    var success = Reflect.set(target,name, value, receiver);\n    if (success) {\n      log('property ' + name + ' on ' + target + ' set to ' + value);\n    }\n    return success;\n  }\n});\n```\n\n上面代码中，`Proxy`方法拦截`target`对象的属性赋值行为。它采用`Reflect.set`方法将值赋值给对象的属性，确保完成原有的行为，然后再部署额外的功能。\n\n下面是另一个例子。\n\n```\nvar loggedObj = new Proxy(obj, {\n  get(target, name) {\n    console.log('get', target, name);\n    return Reflect.get(target, name);\n  },\n  deleteProperty(target, name) {\n    console.log('delete' + name);\n    return Reflect.deleteProperty(target, name);\n  },\n  has(target, name) {\n    console.log('has' + name);\n    return Reflect.has(target, name);\n  }\n});\n```\n\n上面代码中，每一个`Proxy`对象的拦截操作（`get`、`delete`、`has`），内部都调用对应的`Reflect`方法，保证原生行为能够正常执行。添加的工作，就是将每一个操作输出一行日志。\n\n有了`Reflect`对象以后，很多操作会更易读。\n\n```\n// 老写法\nFunction.prototype.apply.call(Math.floor, undefined, [1.75]) // 1\n\n// 新写法\nReflect.apply(Math.floor, undefined, [1.75]) // 1\n```\n\n##Summary\n `Reflect`和`Proxy`中的方法一一对应，没有一一举例子，列举一下。\n \n- `get()` `set()` `has()` `deleteProperty()` `difineProperty()`//与属性有关的方法\n- `getOwnPropertyDescriptor()` `ownKeys()`//Own的属性描述和属性keys\n- `getPrototypeOf()` `setPrototypeOf()`//与原型有关的方法\n- `isExtensible()`判断是否可以扩展 preventExtensions()阻止添加新属性\n- `apply()`//调用方法有关\n- `construct()`//和new 有关的\n\n`Proxy`相当于去修改设置对象的属性行为，而`Reflect`则是获取对象的这些行为。\n\n###Proxy的特点\n>1.行为转发与状态同步\n\n>>代理的行为：将代理的所有内部方法转发至目标\n\n>2.proxy !== target\n\n>>```\nvar obj = {};\nvar proxy = new Proxy(obj, {});\nconsole.log(obj === proxy);  // false\nconsole.log(obj == proxy);  // false\n```\n\n>3.handler拦截\n\n>>可以通过handler对象重写内部方法，拦截并改变target的默认行为\n\n>>未被handler拦截（未在handler对象中重写）的内部方法会直接指向目标\n\n>4.代理关系可以解除\n\n>>代理可以解除，用Proxy.revocable(target, handler)创建返回Object { proxy: Object, revoke: revoke() }，调用revoke()解除代理关系，解除后访问代理对象会报错，例如：\n\n>>```\n// 解除代理关系\nvar rProxy = Proxy.revocable({}, {\n    set: function(target, key, value) {\n        return Reflect.set(target, key, 0);\n    }\n});\nvar p = rProxy.proxy;\np.a = 123;\nconsole.log(p.a);   // 0\n// 解除代理\nrProxy.revoke();\n// p.b = 213;  // 报错TypeError: illegal operation attempted on a revoked proxy\n```\n\n###Proxy的一些其他应用场景\n>1.防篡改对象\n>\n>2.分离校验逻辑\n\n>>setter/getter的优点，通过代理机制能将校验逻辑内置于属性访问行为中，比如可以校验逻辑放在这里面\n\n>3.记录对象访问\n>>主要用于测试/调试中，比如测试框架，通过代理机制可以全程记录一切\n\n>4.增强普通对象\n\n>>例如防篡改对象，在API设计方面有很大想象空间","slug":"Proxy-and-Reflect","published":1,"updated":"2018-04-03T17:19:24.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg3qbjo60000y4vs8f3uizjm","content":"<h1 id=\"Proxy-and-Reflect\"><a href=\"#Proxy-and-Reflect\" class=\"headerlink\" title=\"Proxy and Reflect\"></a>Proxy and Reflect</h1><p><strong>Reflect</strong> 对象与 <strong>Proxy</strong> 对象都是是 ES6 为了操作对象而提供的新 API。</p>\n<blockquote>\n<p><strong>Proxy</strong> 的概述</p>\n<blockquote>\n<p>从 <strong>Proxy</strong> 字面意思来理解更好，就是代理器的意思，<strong>Proxy</strong> 会代理你某些对 Object 的操作，你你这些对 Object 的操作都会经过 <strong>Proxy</strong> 过滤和处理。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p><strong>Reflect</strong> 的概述</p>\n<blockquote>\n<p><strong>Reflect</strong> 是一个内置的全局对象，它提供可拦截 <code>JavaScript</code>操作的方法。方法与<strong>Proxy</strong>的方法相同。<strong>Reflect</strong> 不是一个函数对象，因此它是不可构造的。与大多数全局对象不同，<strong>Reflect</strong>没有构造函数。您不能将其与一个 <code>new</code> 运算符一起使用，也不能将 <strong>Reflect</strong> 对象作为一个函数来调用。</p>\n</blockquote>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h2><p>ES6 原生提供 <code>Proxy</code> 构造函数，用来生成 <code>Proxy</code> 实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var proxy = new Proxy(target, handler);</span><br></pre></td></tr></table></figure>\n<p>Proxy 对象的所有用法，都是上面这种形式，不同的只是<code>handler</code>参数的写法。</p>\n<ul>\n<li><code>target</code>参数表示所要拦截的目标对象。</li>\n<li><code>handler</code>参数也是一个对象，用来定制拦截行为。</li>\n</ul>\n<p>下面是另一个拦截读取属性行为的例子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var target = &#123;</span><br><span class=\"line\">\tname: &apos;Tom&apos;,</span><br><span class=\"line\">\tage: 20</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var proxy = new Proxy(target, &#123;</span><br><span class=\"line\">  get: function(target, property) &#123;</span><br><span class=\"line\">    return 1000;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.name \t// 1000</span><br><span class=\"line\">proxy.age \t// 1000</span><br><span class=\"line\">proxy.title\t// 1000</span><br><span class=\"line\"></span><br><span class=\"line\">target.name \t// Tom</span><br><span class=\"line\">target.age\t//\t20</span><br><span class=\"line\">target.title // undefined</span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>handler</code>是一个配置对象, 在这里面配置你想要被代理的Object操作，每一个别被代理的操作都有个自己处理函数。上面的例子中配置对象有个<code>get</code>方法，用来拦截目标对象的属性访问操作。<code>get</code>方法有两个参数：<code>target</code>就是代理的那个对象，<code>property</code>是所要访问的目标对象的属性。这个拦截函数无论访问什么属性总是返回1000。</p>\n<p>通过上面两组数据的访问，可以看出要：<strong>使得<code>Proxy</code>起作用，必须针对<code>Proxy</code>实例（上例是<code>proxy</code>对象）进行操作，而不是针对目标对象（上例是空对象）进行操作。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var target = &#123;</span><br><span class=\"line\">\tname: &apos;Tom&apos;,</span><br><span class=\"line\">\tage: 20</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var hanler = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var proxy = new Proxy(target, hanler);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.name \t// Tom</span><br><span class=\"line\">proxy.age \t// 20</span><br><span class=\"line\">proxy.title\t// undefined</span><br><span class=\"line\"></span><br><span class=\"line\">target.name \t// Tom</span><br><span class=\"line\">target.age\t//\t20</span><br><span class=\"line\">target.title // undefined</span><br></pre></td></tr></table></figure>\n<p><strong>如果<code>handler</code>是一个空对象，没有任何拦截效果，访问<code>proxy</code>就等同于访问<code>target</code>。</strong></p>\n<h3 id=\"Proxy-实例的方法\"><a href=\"#Proxy-实例的方法\" class=\"headerlink\" title=\"Proxy 实例的方法\"></a>Proxy 实例的方法</h3><h3 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get()\"></a>get()</h3><p><code>get</code>方法用于拦截某个属性的读取操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Tom'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(person, &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (property <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target[property];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">ReferenceError</span>(<span class=\"string\">\"Property \\\"\"</span> + property + <span class=\"string\">\"\\\" does not exist.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.name <span class=\"comment\">// Tom</span></span><br><span class=\"line\">proxy.age  <span class=\"comment\">// Uncaught ReferenceError: Property \"age\" does not exist.</span></span><br></pre></td></tr></table></figure>\n<p>通过<code>Proxy</code>当访问对象没有定义的属性时不返回<code>undefined</code>，而是抛出错误。</p>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set()\"></a>set()</h3><p><code>set</code>方法用来拦截某个属性的赋值操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  get (target, key) &#123;</span><br><span class=\"line\">    invariant(key, <span class=\"string\">'get'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  set (target, key, value) &#123;</span><br><span class=\"line\">    invariant(key, <span class=\"string\">'set'</span>);</span><br><span class=\"line\">    target[key] = value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invariant</span> (<span class=\"params\">key, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">'_'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Invalid attempt to <span class=\"subst\">$&#123;action&#125;</span> private \"<span class=\"subst\">$&#123;key&#125;</span>\" property`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy._prop</span><br><span class=\"line\"><span class=\"comment\">// Error: Invalid attempt to get private \"_prop\" property</span></span><br><span class=\"line\"></span><br><span class=\"line\">proxy._prop = <span class=\"string\">'c'</span></span><br><span class=\"line\"><span class=\"comment\">// Error: Invalid attempt to set private \"_prop\" property</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>invariant</code>方法是一个判断是否为内部属性（以_开头命名的变量）的一个方法，如果是就抛出异常，通过<code>Proxy</code>的<code>set</code>和<code>get</code>方法可以实现禁止内部属性的读写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var handler = &#123;</span><br><span class=\"line\">  set (target, key, value) &#123;</span><br><span class=\"line\">  \ttarget[key] = value;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var target = &#123;</span><br><span class=\"line\">\tname: &apos;Tom&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(target, &apos;name&apos;, &#123;</span><br><span class=\"line\">  configurable: false,</span><br><span class=\"line\">  writable: false</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var proxy = new Proxy(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.name = &apos;Jam&apos;; </span><br><span class=\"line\">// TypeError: &apos;set&apos; on proxy: trap returned truish for property &apos;name&apos; which exists in the proxy target as a non-configurable and non-writable data property with a different value</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.name = &apos;Tom&apos;; // Tom</span><br></pre></td></tr></table></figure>\n<p><strong>如果目标对象自身的某个属性，不可写也不可配置，那么<code>set</code>不得改变这个属性的值，只能返回同样的值，否则报错。</strong></p>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply()\"></a>apply()</h3><p><code>apply</code>方法拦截函数的调用、<code>call</code>和<code>apply</code>操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> target = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">'I am the target'</span>; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  apply: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'I am the proxy'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">p()</span><br><span class=\"line\"><span class=\"comment\">// \"I am the proxy\"</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，变量<code>p</code>是 Proxy 的实例，当它作为函数调用时（<code>p()</code>），就会被<code>apply</code>方法拦截，返回<code>I am the proxy</code>。</p>\n<h2 id=\"实例：Web-服务的客户端\"><a href=\"#实例：Web-服务的客户端\" class=\"headerlink\" title=\"实例：Web 服务的客户端\"></a>实例：Web 服务的客户端</h2><p>Proxy 对象可以拦截目标对象的任意属性，这使得它很合适用来写 Web 服务的客户端。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> service = createWebService(<span class=\"string\">'http://example.com/data'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">service.employees().then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> employees = <span class=\"built_in\">JSON</span>.parse(json);</span><br><span class=\"line\">  <span class=\"comment\">// ···</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码新建了一个 Web 服务的接口，这个接口返回各种数据。Proxy 可以拦截这个对象的任意属性，所以不用为每一种数据写一个适配方法，只要写一个 Proxy 拦截就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createWebService</span>(<span class=\"params\">baseUrl</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">    get(target, propKey) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> httpGet(baseUrl+<span class=\"string\">'/'</span> + propKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>##用ES5简单的实现一下Proxy</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**浅拷贝工具方法**/</span><br><span class=\"line\">function shallowClone(source) &#123;</span><br><span class=\"line\">    if (!source || typeof source !== &apos;object&apos;) &#123;</span><br><span class=\"line\">        throw new Error(&apos;error arguments&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var targetObj = source.constructor === Array ? [] : &#123;&#125;;</span><br><span class=\"line\">    for (var keys in source) &#123;</span><br><span class=\"line\">        if (source.hasOwnProperty(keys)) &#123;</span><br><span class=\"line\">            targetObj[keys] = source[keys];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return targetObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*代理实现*/</span><br><span class=\"line\">function ProxyCopy(target,handle)&#123;</span><br><span class=\"line\">  var targetCopy = shallowClone(target);</span><br><span class=\"line\">  Object.keys(targetCopy).forEach(function(key)&#123;</span><br><span class=\"line\">    Object.defineProperty(targetCopy, key, &#123;</span><br><span class=\"line\">      get: function() &#123;</span><br><span class=\"line\">        return handle.get &amp;&amp; handle.get(target,key);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      set: function(newVal) &#123;</span><br><span class=\"line\">        handle.set &amp;&amp; handle.set();</span><br><span class=\"line\">        target[key] = newVal;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  return targetCopy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var person = &#123;name:&apos;&apos;&#125;;</span><br><span class=\"line\">var personCopy = new ProxyCopy(person,&#123;</span><br><span class=\"line\">  get(target,key)&#123;</span><br><span class=\"line\">    console.log(&apos;get方法被拦截。。。&apos;);</span><br><span class=\"line\">    return target[key];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set(target,key,value)&#123;</span><br><span class=\"line\">    console.log(&apos;set方法被拦截。。。&apos;)</span><br><span class=\"line\">    // return true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">person.name = &apos;arvin&apos;;  // 未有拦截日志打出</span><br><span class=\"line\">personCopy.name = &apos;arvin&apos;;  // set方法被拦截。。。</span><br><span class=\"line\">console.log(person.name);   // 未有拦截日志打出</span><br><span class=\"line\">console.log(personCopy.name);   // get方法被拦截。。。</span><br></pre></td></tr></table></figure>\n<h2 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h2><p>（1） 将<code>Object</code>对象的一些明显属于语言内部的方法（比如<code>Object.defineProperty</code>），放到<code>Reflect</code>对象上。现阶段，某些方法同时在<code>Object</code>和<code>Reflect</code>对象上部署，未来的新方法将只部署在<code>Reflect</code>对象上。也就是说，从<code>Reflect</code>对象上可以拿到语言内部的方法。</p>\n<p>（2） 修改某些<code>Object</code>方法的返回结果，让其变得更合理。比如，<code>Object.defineProperty(obj, name, desc)</code>在无法定义属性时，会抛出一个错误，而<code>Reflect.defineProperty(obj, name, desc)</code>则会返回<code>false</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 老写法</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  Object.defineProperty(target, property, attributes);</span><br><span class=\"line\">  // success</span><br><span class=\"line\">&#125; catch (e) &#123;</span><br><span class=\"line\">  // failure</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 新写法</span><br><span class=\"line\">if (Reflect.defineProperty(target, property, attributes)) &#123;</span><br><span class=\"line\">  // success</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  // failure</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3） 让<code>Object</code>操作都变成函数行为。某些<code>Object</code>操作是命令式，比如<code>name in obj</code>和<code>delete obj[name]</code>，而<code>Reflect.has(obj, name)</code>和<code>Reflect.deleteProperty(obj, name)</code>让它们变成了函数行为。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 老写法</span><br><span class=\"line\">&apos;assign&apos; in Object // true</span><br><span class=\"line\"></span><br><span class=\"line\">// 新写法</span><br><span class=\"line\">Reflect.has(Object, &apos;assign&apos;) // true</span><br></pre></td></tr></table></figure>\n<p>（4）<code>Reflect</code>对象的方法与<code>Proxy</code>对象的方法一一对应，只要是<code>Proxy</code>对象的方法，就能在<code>Reflect</code>对象上找到对应的方法。这就让<code>Proxy</code>对象可以方便地调用对应的<code>Reflect</code>方法，完成默认行为，作为修改行为的基础。也就是说，不管<code>Proxy</code>怎么修改默认行为，你总可以在<code>Reflect</code>上获取默认行为。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Proxy(target, &#123;</span><br><span class=\"line\">  set: function(target, name, value, receiver) &#123;</span><br><span class=\"line\">    var success = Reflect.set(target,name, value, receiver);</span><br><span class=\"line\">    if (success) &#123;</span><br><span class=\"line\">      log(&apos;property &apos; + name + &apos; on &apos; + target + &apos; set to &apos; + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return success;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>Proxy</code>方法拦截<code>target</code>对象的属性赋值行为。它采用<code>Reflect.set</code>方法将值赋值给对象的属性，确保完成原有的行为，然后再部署额外的功能。</p>\n<p>下面是另一个例子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var loggedObj = new Proxy(obj, &#123;</span><br><span class=\"line\">  get(target, name) &#123;</span><br><span class=\"line\">    console.log(&apos;get&apos;, target, name);</span><br><span class=\"line\">    return Reflect.get(target, name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  deleteProperty(target, name) &#123;</span><br><span class=\"line\">    console.log(&apos;delete&apos; + name);</span><br><span class=\"line\">    return Reflect.deleteProperty(target, name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  has(target, name) &#123;</span><br><span class=\"line\">    console.log(&apos;has&apos; + name);</span><br><span class=\"line\">    return Reflect.has(target, name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，每一个<code>Proxy</code>对象的拦截操作（<code>get</code>、<code>delete</code>、<code>has</code>），内部都调用对应的<code>Reflect</code>方法，保证原生行为能够正常执行。添加的工作，就是将每一个操作输出一行日志。</p>\n<p>有了<code>Reflect</code>对象以后，很多操作会更易读。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 老写法</span><br><span class=\"line\">Function.prototype.apply.call(Math.floor, undefined, [1.75]) // 1</span><br><span class=\"line\"></span><br><span class=\"line\">// 新写法</span><br><span class=\"line\">Reflect.apply(Math.floor, undefined, [1.75]) // 1</span><br></pre></td></tr></table></figure>\n<p>##Summary<br> <code>Reflect</code>和<code>Proxy</code>中的方法一一对应，没有一一举例子，列举一下。</p>\n<ul>\n<li><code>get()</code> <code>set()</code> <code>has()</code> <code>deleteProperty()</code> <code>difineProperty()</code>//与属性有关的方法</li>\n<li><code>getOwnPropertyDescriptor()</code> <code>ownKeys()</code>//Own的属性描述和属性keys</li>\n<li><code>getPrototypeOf()</code> <code>setPrototypeOf()</code>//与原型有关的方法</li>\n<li><code>isExtensible()</code>判断是否可以扩展 preventExtensions()阻止添加新属性</li>\n<li><code>apply()</code>//调用方法有关</li>\n<li><code>construct()</code>//和new 有关的</li>\n</ul>\n<p><code>Proxy</code>相当于去修改设置对象的属性行为，而<code>Reflect</code>则是获取对象的这些行为。</p>\n<p>###Proxy的特点</p>\n<blockquote>\n<p>1.行为转发与状态同步</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>代理的行为：将代理的所有内部方法转发至目标</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>2.proxy !== target</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;&#125;;</span><br><span class=\"line\">var proxy = new Proxy(obj, &#123;&#125;);</span><br><span class=\"line\">console.log(obj === proxy);  // false</span><br><span class=\"line\">console.log(obj == proxy);  // false</span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>3.handler拦截</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>可以通过handler对象重写内部方法，拦截并改变target的默认行为</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>未被handler拦截（未在handler对象中重写）的内部方法会直接指向目标</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>4.代理关系可以解除</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>代理可以解除，用Proxy.revocable(target, handler)创建返回Object { proxy: Object, revoke: revoke() }，调用revoke()解除代理关系，解除后访问代理对象会报错，例如：</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 解除代理关系</span><br><span class=\"line\">var rProxy = Proxy.revocable(&#123;&#125;, &#123;</span><br><span class=\"line\">    set: function(target, key, value) &#123;</span><br><span class=\"line\">        return Reflect.set(target, key, 0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">var p = rProxy.proxy;</span><br><span class=\"line\">p.a = 123;</span><br><span class=\"line\">console.log(p.a);   // 0</span><br><span class=\"line\">// 解除代理</span><br><span class=\"line\">rProxy.revoke();</span><br><span class=\"line\">// p.b = 213;  // 报错TypeError: illegal operation attempted on a revoked proxy</span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<p>###Proxy的一些其他应用场景</p>\n<blockquote>\n<p>1.防篡改对象</p>\n<p>2.分离校验逻辑</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>setter/getter的优点，通过代理机制能将校验逻辑内置于属性访问行为中，比如可以校验逻辑放在这里面</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>3.记录对象访问</p>\n<blockquote>\n<p>主要用于测试/调试中，比如测试框架，通过代理机制可以全程记录一切</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>4.增强普通对象</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>例如防篡改对象，在API设计方面有很大想象空间</p>\n</blockquote>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"Proxy-and-Reflect\"><a href=\"#Proxy-and-Reflect\" class=\"headerlink\" title=\"Proxy and Reflect\"></a>Proxy and Reflect</h1><p><strong>Reflect</strong> 对象与 <strong>Proxy</strong> 对象都是是 ES6 为了操作对象而提供的新 API。</p>\n<blockquote>\n<p><strong>Proxy</strong> 的概述</p>\n<blockquote>\n<p>从 <strong>Proxy</strong> 字面意思来理解更好，就是代理器的意思，<strong>Proxy</strong> 会代理你某些对 Object 的操作，你你这些对 Object 的操作都会经过 <strong>Proxy</strong> 过滤和处理。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p><strong>Reflect</strong> 的概述</p>\n<blockquote>\n<p><strong>Reflect</strong> 是一个内置的全局对象，它提供可拦截 <code>JavaScript</code>操作的方法。方法与<strong>Proxy</strong>的方法相同。<strong>Reflect</strong> 不是一个函数对象，因此它是不可构造的。与大多数全局对象不同，<strong>Reflect</strong>没有构造函数。您不能将其与一个 <code>new</code> 运算符一起使用，也不能将 <strong>Reflect</strong> 对象作为一个函数来调用。</p>\n</blockquote>\n</blockquote>","more":"<h2 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h2><p>ES6 原生提供 <code>Proxy</code> 构造函数，用来生成 <code>Proxy</code> 实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var proxy = new Proxy(target, handler);</span><br></pre></td></tr></table></figure>\n<p>Proxy 对象的所有用法，都是上面这种形式，不同的只是<code>handler</code>参数的写法。</p>\n<ul>\n<li><code>target</code>参数表示所要拦截的目标对象。</li>\n<li><code>handler</code>参数也是一个对象，用来定制拦截行为。</li>\n</ul>\n<p>下面是另一个拦截读取属性行为的例子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var target = &#123;</span><br><span class=\"line\">\tname: &apos;Tom&apos;,</span><br><span class=\"line\">\tage: 20</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var proxy = new Proxy(target, &#123;</span><br><span class=\"line\">  get: function(target, property) &#123;</span><br><span class=\"line\">    return 1000;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.name \t// 1000</span><br><span class=\"line\">proxy.age \t// 1000</span><br><span class=\"line\">proxy.title\t// 1000</span><br><span class=\"line\"></span><br><span class=\"line\">target.name \t// Tom</span><br><span class=\"line\">target.age\t//\t20</span><br><span class=\"line\">target.title // undefined</span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>handler</code>是一个配置对象, 在这里面配置你想要被代理的Object操作，每一个别被代理的操作都有个自己处理函数。上面的例子中配置对象有个<code>get</code>方法，用来拦截目标对象的属性访问操作。<code>get</code>方法有两个参数：<code>target</code>就是代理的那个对象，<code>property</code>是所要访问的目标对象的属性。这个拦截函数无论访问什么属性总是返回1000。</p>\n<p>通过上面两组数据的访问，可以看出要：<strong>使得<code>Proxy</code>起作用，必须针对<code>Proxy</code>实例（上例是<code>proxy</code>对象）进行操作，而不是针对目标对象（上例是空对象）进行操作。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var target = &#123;</span><br><span class=\"line\">\tname: &apos;Tom&apos;,</span><br><span class=\"line\">\tage: 20</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var hanler = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var proxy = new Proxy(target, hanler);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.name \t// Tom</span><br><span class=\"line\">proxy.age \t// 20</span><br><span class=\"line\">proxy.title\t// undefined</span><br><span class=\"line\"></span><br><span class=\"line\">target.name \t// Tom</span><br><span class=\"line\">target.age\t//\t20</span><br><span class=\"line\">target.title // undefined</span><br></pre></td></tr></table></figure>\n<p><strong>如果<code>handler</code>是一个空对象，没有任何拦截效果，访问<code>proxy</code>就等同于访问<code>target</code>。</strong></p>\n<h3 id=\"Proxy-实例的方法\"><a href=\"#Proxy-实例的方法\" class=\"headerlink\" title=\"Proxy 实例的方法\"></a>Proxy 实例的方法</h3><h3 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get()\"></a>get()</h3><p><code>get</code>方法用于拦截某个属性的读取操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Tom'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(person, &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (property <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target[property];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">ReferenceError</span>(<span class=\"string\">\"Property \\\"\"</span> + property + <span class=\"string\">\"\\\" does not exist.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.name <span class=\"comment\">// Tom</span></span><br><span class=\"line\">proxy.age  <span class=\"comment\">// Uncaught ReferenceError: Property \"age\" does not exist.</span></span><br></pre></td></tr></table></figure>\n<p>通过<code>Proxy</code>当访问对象没有定义的属性时不返回<code>undefined</code>，而是抛出错误。</p>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set()\"></a>set()</h3><p><code>set</code>方法用来拦截某个属性的赋值操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  get (target, key) &#123;</span><br><span class=\"line\">    invariant(key, <span class=\"string\">'get'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  set (target, key, value) &#123;</span><br><span class=\"line\">    invariant(key, <span class=\"string\">'set'</span>);</span><br><span class=\"line\">    target[key] = value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invariant</span> (<span class=\"params\">key, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">'_'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Invalid attempt to <span class=\"subst\">$&#123;action&#125;</span> private \"<span class=\"subst\">$&#123;key&#125;</span>\" property`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy._prop</span><br><span class=\"line\"><span class=\"comment\">// Error: Invalid attempt to get private \"_prop\" property</span></span><br><span class=\"line\"></span><br><span class=\"line\">proxy._prop = <span class=\"string\">'c'</span></span><br><span class=\"line\"><span class=\"comment\">// Error: Invalid attempt to set private \"_prop\" property</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>invariant</code>方法是一个判断是否为内部属性（以_开头命名的变量）的一个方法，如果是就抛出异常，通过<code>Proxy</code>的<code>set</code>和<code>get</code>方法可以实现禁止内部属性的读写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var handler = &#123;</span><br><span class=\"line\">  set (target, key, value) &#123;</span><br><span class=\"line\">  \ttarget[key] = value;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var target = &#123;</span><br><span class=\"line\">\tname: &apos;Tom&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(target, &apos;name&apos;, &#123;</span><br><span class=\"line\">  configurable: false,</span><br><span class=\"line\">  writable: false</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var proxy = new Proxy(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.name = &apos;Jam&apos;; </span><br><span class=\"line\">// TypeError: &apos;set&apos; on proxy: trap returned truish for property &apos;name&apos; which exists in the proxy target as a non-configurable and non-writable data property with a different value</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.name = &apos;Tom&apos;; // Tom</span><br></pre></td></tr></table></figure>\n<p><strong>如果目标对象自身的某个属性，不可写也不可配置，那么<code>set</code>不得改变这个属性的值，只能返回同样的值，否则报错。</strong></p>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply()\"></a>apply()</h3><p><code>apply</code>方法拦截函数的调用、<code>call</code>和<code>apply</code>操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> target = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">'I am the target'</span>; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  apply: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'I am the proxy'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">p()</span><br><span class=\"line\"><span class=\"comment\">// \"I am the proxy\"</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，变量<code>p</code>是 Proxy 的实例，当它作为函数调用时（<code>p()</code>），就会被<code>apply</code>方法拦截，返回<code>I am the proxy</code>。</p>\n<h2 id=\"实例：Web-服务的客户端\"><a href=\"#实例：Web-服务的客户端\" class=\"headerlink\" title=\"实例：Web 服务的客户端\"></a>实例：Web 服务的客户端</h2><p>Proxy 对象可以拦截目标对象的任意属性，这使得它很合适用来写 Web 服务的客户端。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> service = createWebService(<span class=\"string\">'http://example.com/data'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">service.employees().then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> employees = <span class=\"built_in\">JSON</span>.parse(json);</span><br><span class=\"line\">  <span class=\"comment\">// ···</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码新建了一个 Web 服务的接口，这个接口返回各种数据。Proxy 可以拦截这个对象的任意属性，所以不用为每一种数据写一个适配方法，只要写一个 Proxy 拦截就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createWebService</span>(<span class=\"params\">baseUrl</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">    get(target, propKey) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> httpGet(baseUrl+<span class=\"string\">'/'</span> + propKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>##用ES5简单的实现一下Proxy</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**浅拷贝工具方法**/</span><br><span class=\"line\">function shallowClone(source) &#123;</span><br><span class=\"line\">    if (!source || typeof source !== &apos;object&apos;) &#123;</span><br><span class=\"line\">        throw new Error(&apos;error arguments&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var targetObj = source.constructor === Array ? [] : &#123;&#125;;</span><br><span class=\"line\">    for (var keys in source) &#123;</span><br><span class=\"line\">        if (source.hasOwnProperty(keys)) &#123;</span><br><span class=\"line\">            targetObj[keys] = source[keys];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return targetObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*代理实现*/</span><br><span class=\"line\">function ProxyCopy(target,handle)&#123;</span><br><span class=\"line\">  var targetCopy = shallowClone(target);</span><br><span class=\"line\">  Object.keys(targetCopy).forEach(function(key)&#123;</span><br><span class=\"line\">    Object.defineProperty(targetCopy, key, &#123;</span><br><span class=\"line\">      get: function() &#123;</span><br><span class=\"line\">        return handle.get &amp;&amp; handle.get(target,key);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      set: function(newVal) &#123;</span><br><span class=\"line\">        handle.set &amp;&amp; handle.set();</span><br><span class=\"line\">        target[key] = newVal;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  return targetCopy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var person = &#123;name:&apos;&apos;&#125;;</span><br><span class=\"line\">var personCopy = new ProxyCopy(person,&#123;</span><br><span class=\"line\">  get(target,key)&#123;</span><br><span class=\"line\">    console.log(&apos;get方法被拦截。。。&apos;);</span><br><span class=\"line\">    return target[key];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set(target,key,value)&#123;</span><br><span class=\"line\">    console.log(&apos;set方法被拦截。。。&apos;)</span><br><span class=\"line\">    // return true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">person.name = &apos;arvin&apos;;  // 未有拦截日志打出</span><br><span class=\"line\">personCopy.name = &apos;arvin&apos;;  // set方法被拦截。。。</span><br><span class=\"line\">console.log(person.name);   // 未有拦截日志打出</span><br><span class=\"line\">console.log(personCopy.name);   // get方法被拦截。。。</span><br></pre></td></tr></table></figure>\n<h2 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h2><p>（1） 将<code>Object</code>对象的一些明显属于语言内部的方法（比如<code>Object.defineProperty</code>），放到<code>Reflect</code>对象上。现阶段，某些方法同时在<code>Object</code>和<code>Reflect</code>对象上部署，未来的新方法将只部署在<code>Reflect</code>对象上。也就是说，从<code>Reflect</code>对象上可以拿到语言内部的方法。</p>\n<p>（2） 修改某些<code>Object</code>方法的返回结果，让其变得更合理。比如，<code>Object.defineProperty(obj, name, desc)</code>在无法定义属性时，会抛出一个错误，而<code>Reflect.defineProperty(obj, name, desc)</code>则会返回<code>false</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 老写法</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  Object.defineProperty(target, property, attributes);</span><br><span class=\"line\">  // success</span><br><span class=\"line\">&#125; catch (e) &#123;</span><br><span class=\"line\">  // failure</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 新写法</span><br><span class=\"line\">if (Reflect.defineProperty(target, property, attributes)) &#123;</span><br><span class=\"line\">  // success</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  // failure</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3） 让<code>Object</code>操作都变成函数行为。某些<code>Object</code>操作是命令式，比如<code>name in obj</code>和<code>delete obj[name]</code>，而<code>Reflect.has(obj, name)</code>和<code>Reflect.deleteProperty(obj, name)</code>让它们变成了函数行为。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 老写法</span><br><span class=\"line\">&apos;assign&apos; in Object // true</span><br><span class=\"line\"></span><br><span class=\"line\">// 新写法</span><br><span class=\"line\">Reflect.has(Object, &apos;assign&apos;) // true</span><br></pre></td></tr></table></figure>\n<p>（4）<code>Reflect</code>对象的方法与<code>Proxy</code>对象的方法一一对应，只要是<code>Proxy</code>对象的方法，就能在<code>Reflect</code>对象上找到对应的方法。这就让<code>Proxy</code>对象可以方便地调用对应的<code>Reflect</code>方法，完成默认行为，作为修改行为的基础。也就是说，不管<code>Proxy</code>怎么修改默认行为，你总可以在<code>Reflect</code>上获取默认行为。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Proxy(target, &#123;</span><br><span class=\"line\">  set: function(target, name, value, receiver) &#123;</span><br><span class=\"line\">    var success = Reflect.set(target,name, value, receiver);</span><br><span class=\"line\">    if (success) &#123;</span><br><span class=\"line\">      log(&apos;property &apos; + name + &apos; on &apos; + target + &apos; set to &apos; + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return success;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>Proxy</code>方法拦截<code>target</code>对象的属性赋值行为。它采用<code>Reflect.set</code>方法将值赋值给对象的属性，确保完成原有的行为，然后再部署额外的功能。</p>\n<p>下面是另一个例子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var loggedObj = new Proxy(obj, &#123;</span><br><span class=\"line\">  get(target, name) &#123;</span><br><span class=\"line\">    console.log(&apos;get&apos;, target, name);</span><br><span class=\"line\">    return Reflect.get(target, name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  deleteProperty(target, name) &#123;</span><br><span class=\"line\">    console.log(&apos;delete&apos; + name);</span><br><span class=\"line\">    return Reflect.deleteProperty(target, name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  has(target, name) &#123;</span><br><span class=\"line\">    console.log(&apos;has&apos; + name);</span><br><span class=\"line\">    return Reflect.has(target, name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，每一个<code>Proxy</code>对象的拦截操作（<code>get</code>、<code>delete</code>、<code>has</code>），内部都调用对应的<code>Reflect</code>方法，保证原生行为能够正常执行。添加的工作，就是将每一个操作输出一行日志。</p>\n<p>有了<code>Reflect</code>对象以后，很多操作会更易读。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 老写法</span><br><span class=\"line\">Function.prototype.apply.call(Math.floor, undefined, [1.75]) // 1</span><br><span class=\"line\"></span><br><span class=\"line\">// 新写法</span><br><span class=\"line\">Reflect.apply(Math.floor, undefined, [1.75]) // 1</span><br></pre></td></tr></table></figure>\n<p>##Summary<br> <code>Reflect</code>和<code>Proxy</code>中的方法一一对应，没有一一举例子，列举一下。</p>\n<ul>\n<li><code>get()</code> <code>set()</code> <code>has()</code> <code>deleteProperty()</code> <code>difineProperty()</code>//与属性有关的方法</li>\n<li><code>getOwnPropertyDescriptor()</code> <code>ownKeys()</code>//Own的属性描述和属性keys</li>\n<li><code>getPrototypeOf()</code> <code>setPrototypeOf()</code>//与原型有关的方法</li>\n<li><code>isExtensible()</code>判断是否可以扩展 preventExtensions()阻止添加新属性</li>\n<li><code>apply()</code>//调用方法有关</li>\n<li><code>construct()</code>//和new 有关的</li>\n</ul>\n<p><code>Proxy</code>相当于去修改设置对象的属性行为，而<code>Reflect</code>则是获取对象的这些行为。</p>\n<p>###Proxy的特点</p>\n<blockquote>\n<p>1.行为转发与状态同步</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>代理的行为：将代理的所有内部方法转发至目标</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>2.proxy !== target</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;&#125;;</span><br><span class=\"line\">var proxy = new Proxy(obj, &#123;&#125;);</span><br><span class=\"line\">console.log(obj === proxy);  // false</span><br><span class=\"line\">console.log(obj == proxy);  // false</span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>3.handler拦截</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>可以通过handler对象重写内部方法，拦截并改变target的默认行为</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>未被handler拦截（未在handler对象中重写）的内部方法会直接指向目标</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>4.代理关系可以解除</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>代理可以解除，用Proxy.revocable(target, handler)创建返回Object { proxy: Object, revoke: revoke() }，调用revoke()解除代理关系，解除后访问代理对象会报错，例如：</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 解除代理关系</span><br><span class=\"line\">var rProxy = Proxy.revocable(&#123;&#125;, &#123;</span><br><span class=\"line\">    set: function(target, key, value) &#123;</span><br><span class=\"line\">        return Reflect.set(target, key, 0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">var p = rProxy.proxy;</span><br><span class=\"line\">p.a = 123;</span><br><span class=\"line\">console.log(p.a);   // 0</span><br><span class=\"line\">// 解除代理</span><br><span class=\"line\">rProxy.revoke();</span><br><span class=\"line\">// p.b = 213;  // 报错TypeError: illegal operation attempted on a revoked proxy</span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<p>###Proxy的一些其他应用场景</p>\n<blockquote>\n<p>1.防篡改对象</p>\n<p>2.分离校验逻辑</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>setter/getter的优点，通过代理机制能将校验逻辑内置于属性访问行为中，比如可以校验逻辑放在这里面</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>3.记录对象访问</p>\n<blockquote>\n<p>主要用于测试/调试中，比如测试框架，通过代理机制可以全程记录一切</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>4.增强普通对象</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>例如防篡改对象，在API设计方面有很大想象空间</p>\n</blockquote>\n</blockquote>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags:\n- hexo\n\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-04-03T16:04:22.160Z","updated":"2018-04-03T18:23:10.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg3qbjoa0002y4vserr4n7z9","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"前端路由实现","date":"2018-04-17T13:51:23.000Z","_content":"\n# 前端路由\n前端框架都有对路由的实现不考虑兼容细节，核心的实现本质上都差不多：\n\n- 基于hash的前端路由\n- 基于H5 History的前端路\n\n<!--more-->\n\n### hash路由\n\nhash路由一个明显的标志是带有#,我们主要是通过监听url中的hash变化来进行路由跳转。\n\n- 通过事件 hashchange,当hash变化时，触发haschange事件，执行 callback 函数\n- 需要做的就是把特定的 hash 和 所对应的 callback 函数映射起来就可以\n- 用 ES6 实现一个简单具有前进后退功能的 router\n\n``` javascript\n\nclass Routers {\n    constructor() {\n      // 储存hash与callback键值对\n      this.routes = {};\n     \n      this.currentUrl = '';\n      \n      this.history = [];\n      \n      this.currentIndex = this.history.length - 1;\n      this.refresh = this.refresh.bind(this);\n      this.goBack = this.goBack.bind(this);\n      this.goForward = this.goForward.bind(this);\n      // 不是历史操作\n      this.isHistoryOp = false;\n  \n      window.addEventListener('load', this.refresh, false);\n      window.addEventListener('hashchange', this.refresh, false);\n    }\n  \t\n  \t// 实现 hash 和 callback 的映射\n    route(path, callback) {\n      this.routes[path] = callback || function() {};\n    }\n  \n    refresh() {\n      this.currentUrl = location.hash.slice(1) || '/';\n      if (!this.isHistoryOp) {\n        this.history.push(this.currentUrl);\n        this.currentIndex++;\n      }\n\n      this.routes[this.currentUrl]();\n      console.log('指针:', this.currentIndex, 'history:', this.history);\n      this.isHistoryOp = false;\n    }\n  \n    goBack() {\n      this.isHistoryOp = true;\n      this.currentIndex = (this.currentIndex <= 0 ? 0 : this.currentIndex - 1);\n        \n      location.hash = `#${this.history[this.currentIndex]}`;\n      this.routes[this.history[this.currentIndex]]();\n    }\n    \n    goForward () {\n       this.isHistoryOp = true;\n       this.currentIndex = (this.currentIndex >= this.history.length -1 ? this.history.length -1 : this.currentIndex+1);\n      \n      location.hash = `#${this.history[this.currentIndex]}`;\n      this.routes[this.history[this.currentIndex]]();\n    }\n  }\n```\n\n### history路由\nhistory 主要是以HTML5标准提供了History API供我们使用实现的，主要了解以下内容：\n\n-  history.pushState, 用于在浏览历史中添加历史记录,但是并不触发跳转\n-  history.replaceState, 用于修改浏览历史中当前纪录,而非添加记录,同样不触发跳转\n-  事件 popstate, 每当同一个文档的浏览历史（即history对象）出现变化时，就会触发popstate事件\n-  事件 popstate, 仅仅调用pushState方法或replaceState方法 ，并不会触发该事件，只有用户点击浏览器倒退按钮和前进按钮，或者使用 JavaScript 调用back、forward、go方法时才会触发\n\n``` javascript\nclass Routers {\n  constructor() {\n    this.routes = {};\n    \n    // 在初始化时监听popstate事件\n    this._bindPopState();\n  }\n  \n  // 将路径和对应回调函数加入hashMap储存\n  route(path, callback) {\n    this.routes[path] = callback || function() {};\n  }\n\n  // 触发路由对应回调\n  go(path) {\n    history.pushState({path: path}, null, path);\n    this.routes[path] && this.routes[path]();\n  }\n  \n  // 监听popstate事件\n  _bindPopState() {\n    window.addEventListener('popstate', e => {\n      const path = e.state && e.state.path;\n      this.routes[path] && this.routes[path]();\n    });\n  }\n}\n```\n\n# summary\nhistory 路由和 hash 路由比用了H5 所提供的 api url看上去更美观，但是两种路由其实是想起来核心的地方都是相似的。\n\n- 都是需要建立起路径与之对应的 callback 函数的映射\n- 都是通过事件监听来触发callback，然后根据触发事件的 hash 或者 path 的变化，找到与之对应的 callback\n- hash 路由需要监听 hashchange 事件，history 需要监听 popstate 事件","source":"_posts/前端路由实现.md","raw":"---\ntitle: 前端路由实现\ndate: 2018-04-17 21:51:23\ncategories:\n- JavaScript\ntags: \n- ES6\n\n---\n\n# 前端路由\n前端框架都有对路由的实现不考虑兼容细节，核心的实现本质上都差不多：\n\n- 基于hash的前端路由\n- 基于H5 History的前端路\n\n<!--more-->\n\n### hash路由\n\nhash路由一个明显的标志是带有#,我们主要是通过监听url中的hash变化来进行路由跳转。\n\n- 通过事件 hashchange,当hash变化时，触发haschange事件，执行 callback 函数\n- 需要做的就是把特定的 hash 和 所对应的 callback 函数映射起来就可以\n- 用 ES6 实现一个简单具有前进后退功能的 router\n\n``` javascript\n\nclass Routers {\n    constructor() {\n      // 储存hash与callback键值对\n      this.routes = {};\n     \n      this.currentUrl = '';\n      \n      this.history = [];\n      \n      this.currentIndex = this.history.length - 1;\n      this.refresh = this.refresh.bind(this);\n      this.goBack = this.goBack.bind(this);\n      this.goForward = this.goForward.bind(this);\n      // 不是历史操作\n      this.isHistoryOp = false;\n  \n      window.addEventListener('load', this.refresh, false);\n      window.addEventListener('hashchange', this.refresh, false);\n    }\n  \t\n  \t// 实现 hash 和 callback 的映射\n    route(path, callback) {\n      this.routes[path] = callback || function() {};\n    }\n  \n    refresh() {\n      this.currentUrl = location.hash.slice(1) || '/';\n      if (!this.isHistoryOp) {\n        this.history.push(this.currentUrl);\n        this.currentIndex++;\n      }\n\n      this.routes[this.currentUrl]();\n      console.log('指针:', this.currentIndex, 'history:', this.history);\n      this.isHistoryOp = false;\n    }\n  \n    goBack() {\n      this.isHistoryOp = true;\n      this.currentIndex = (this.currentIndex <= 0 ? 0 : this.currentIndex - 1);\n        \n      location.hash = `#${this.history[this.currentIndex]}`;\n      this.routes[this.history[this.currentIndex]]();\n    }\n    \n    goForward () {\n       this.isHistoryOp = true;\n       this.currentIndex = (this.currentIndex >= this.history.length -1 ? this.history.length -1 : this.currentIndex+1);\n      \n      location.hash = `#${this.history[this.currentIndex]}`;\n      this.routes[this.history[this.currentIndex]]();\n    }\n  }\n```\n\n### history路由\nhistory 主要是以HTML5标准提供了History API供我们使用实现的，主要了解以下内容：\n\n-  history.pushState, 用于在浏览历史中添加历史记录,但是并不触发跳转\n-  history.replaceState, 用于修改浏览历史中当前纪录,而非添加记录,同样不触发跳转\n-  事件 popstate, 每当同一个文档的浏览历史（即history对象）出现变化时，就会触发popstate事件\n-  事件 popstate, 仅仅调用pushState方法或replaceState方法 ，并不会触发该事件，只有用户点击浏览器倒退按钮和前进按钮，或者使用 JavaScript 调用back、forward、go方法时才会触发\n\n``` javascript\nclass Routers {\n  constructor() {\n    this.routes = {};\n    \n    // 在初始化时监听popstate事件\n    this._bindPopState();\n  }\n  \n  // 将路径和对应回调函数加入hashMap储存\n  route(path, callback) {\n    this.routes[path] = callback || function() {};\n  }\n\n  // 触发路由对应回调\n  go(path) {\n    history.pushState({path: path}, null, path);\n    this.routes[path] && this.routes[path]();\n  }\n  \n  // 监听popstate事件\n  _bindPopState() {\n    window.addEventListener('popstate', e => {\n      const path = e.state && e.state.path;\n      this.routes[path] && this.routes[path]();\n    });\n  }\n}\n```\n\n# summary\nhistory 路由和 hash 路由比用了H5 所提供的 api url看上去更美观，但是两种路由其实是想起来核心的地方都是相似的。\n\n- 都是需要建立起路径与之对应的 callback 函数的映射\n- 都是通过事件监听来触发callback，然后根据触发事件的 hash 或者 path 的变化，找到与之对应的 callback\n- hash 路由需要监听 hashchange 事件，history 需要监听 popstate 事件","slug":"前端路由实现","published":1,"updated":"2018-04-17T13:58:51.092Z","_id":"cjg3qbjoe0005y4vs9vwbrsar","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h1><p>前端框架都有对路由的实现不考虑兼容细节，核心的实现本质上都差不多：</p>\n<ul>\n<li>基于hash的前端路由</li>\n<li>基于H5 History的前端路</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"hash路由\"><a href=\"#hash路由\" class=\"headerlink\" title=\"hash路由\"></a>hash路由</h3><p>hash路由一个明显的标志是带有#,我们主要是通过监听url中的hash变化来进行路由跳转。</p>\n<ul>\n<li>通过事件 hashchange,当hash变化时，触发haschange事件，执行 callback 函数</li>\n<li>需要做的就是把特定的 hash 和 所对应的 callback 函数映射起来就可以</li>\n<li>用 ES6 实现一个简单具有前进后退功能的 router</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Routers</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 储存hash与callback键值对</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.routes = &#123;&#125;;</span><br><span class=\"line\">     </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.currentUrl = <span class=\"string\">''</span>;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.history = [];</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.currentIndex = <span class=\"keyword\">this</span>.history.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.refresh = <span class=\"keyword\">this</span>.refresh.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.goBack = <span class=\"keyword\">this</span>.goBack.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.goForward = <span class=\"keyword\">this</span>.goForward.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 不是历史操作</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isHistoryOp = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"keyword\">this</span>.refresh, <span class=\"literal\">false</span>);</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'hashchange'</span>, <span class=\"keyword\">this</span>.refresh, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t</span><br><span class=\"line\">  \t<span class=\"comment\">// 实现 hash 和 callback 的映射</span></span><br><span class=\"line\">    route(path, callback) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.routes[path] = callback || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    refresh() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.currentUrl = location.hash.slice(<span class=\"number\">1</span>) || <span class=\"string\">'/'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.isHistoryOp) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.history.push(<span class=\"keyword\">this</span>.currentUrl);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentIndex++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.routes[<span class=\"keyword\">this</span>.currentUrl]();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'指针:'</span>, <span class=\"keyword\">this</span>.currentIndex, <span class=\"string\">'history:'</span>, <span class=\"keyword\">this</span>.history);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isHistoryOp = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    goBack() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isHistoryOp = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.currentIndex = (<span class=\"keyword\">this</span>.currentIndex &lt;= <span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"keyword\">this</span>.currentIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">      location.hash = <span class=\"string\">`#<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.history[<span class=\"keyword\">this</span>.currentIndex]&#125;</span>`</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.routes[<span class=\"keyword\">this</span>.history[<span class=\"keyword\">this</span>.currentIndex]]();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    goForward () &#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.isHistoryOp = <span class=\"literal\">true</span>;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.currentIndex = (<span class=\"keyword\">this</span>.currentIndex &gt;= <span class=\"keyword\">this</span>.history.length <span class=\"number\">-1</span> ? <span class=\"keyword\">this</span>.history.length <span class=\"number\">-1</span> : <span class=\"keyword\">this</span>.currentIndex+<span class=\"number\">1</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">      location.hash = <span class=\"string\">`#<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.history[<span class=\"keyword\">this</span>.currentIndex]&#125;</span>`</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.routes[<span class=\"keyword\">this</span>.history[<span class=\"keyword\">this</span>.currentIndex]]();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"history路由\"><a href=\"#history路由\" class=\"headerlink\" title=\"history路由\"></a>history路由</h3><p>history 主要是以HTML5标准提供了History API供我们使用实现的，主要了解以下内容：</p>\n<ul>\n<li>history.pushState, 用于在浏览历史中添加历史记录,但是并不触发跳转</li>\n<li>history.replaceState, 用于修改浏览历史中当前纪录,而非添加记录,同样不触发跳转</li>\n<li>事件 popstate, 每当同一个文档的浏览历史（即history对象）出现变化时，就会触发popstate事件</li>\n<li>事件 popstate, 仅仅调用pushState方法或replaceState方法 ，并不会触发该事件，只有用户点击浏览器倒退按钮和前进按钮，或者使用 JavaScript 调用back、forward、go方法时才会触发</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Routers</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.routes = &#123;&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 在初始化时监听popstate事件</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._bindPopState();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 将路径和对应回调函数加入hashMap储存</span></span><br><span class=\"line\">  route(path, callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.routes[path] = callback || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 触发路由对应回调</span></span><br><span class=\"line\">  go(path) &#123;</span><br><span class=\"line\">    history.pushState(&#123;<span class=\"attr\">path</span>: path&#125;, <span class=\"literal\">null</span>, path);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.routes[path] &amp;&amp; <span class=\"keyword\">this</span>.routes[path]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 监听popstate事件</span></span><br><span class=\"line\">  _bindPopState() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'popstate'</span>, e =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> path = e.state &amp;&amp; e.state.path;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.routes[path] &amp;&amp; <span class=\"keyword\">this</span>.routes[path]();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"summary\"><a href=\"#summary\" class=\"headerlink\" title=\"summary\"></a>summary</h1><p>history 路由和 hash 路由比用了H5 所提供的 api url看上去更美观，但是两种路由其实是想起来核心的地方都是相似的。</p>\n<ul>\n<li>都是需要建立起路径与之对应的 callback 函数的映射</li>\n<li>都是通过事件监听来触发callback，然后根据触发事件的 hash 或者 path 的变化，找到与之对应的 callback</li>\n<li>hash 路由需要监听 hashchange 事件，history 需要监听 popstate 事件</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h1><p>前端框架都有对路由的实现不考虑兼容细节，核心的实现本质上都差不多：</p>\n<ul>\n<li>基于hash的前端路由</li>\n<li>基于H5 History的前端路</li>\n</ul>","more":"<h3 id=\"hash路由\"><a href=\"#hash路由\" class=\"headerlink\" title=\"hash路由\"></a>hash路由</h3><p>hash路由一个明显的标志是带有#,我们主要是通过监听url中的hash变化来进行路由跳转。</p>\n<ul>\n<li>通过事件 hashchange,当hash变化时，触发haschange事件，执行 callback 函数</li>\n<li>需要做的就是把特定的 hash 和 所对应的 callback 函数映射起来就可以</li>\n<li>用 ES6 实现一个简单具有前进后退功能的 router</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Routers</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 储存hash与callback键值对</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.routes = &#123;&#125;;</span><br><span class=\"line\">     </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.currentUrl = <span class=\"string\">''</span>;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.history = [];</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.currentIndex = <span class=\"keyword\">this</span>.history.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.refresh = <span class=\"keyword\">this</span>.refresh.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.goBack = <span class=\"keyword\">this</span>.goBack.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.goForward = <span class=\"keyword\">this</span>.goForward.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 不是历史操作</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isHistoryOp = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"keyword\">this</span>.refresh, <span class=\"literal\">false</span>);</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'hashchange'</span>, <span class=\"keyword\">this</span>.refresh, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t</span><br><span class=\"line\">  \t<span class=\"comment\">// 实现 hash 和 callback 的映射</span></span><br><span class=\"line\">    route(path, callback) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.routes[path] = callback || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    refresh() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.currentUrl = location.hash.slice(<span class=\"number\">1</span>) || <span class=\"string\">'/'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.isHistoryOp) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.history.push(<span class=\"keyword\">this</span>.currentUrl);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentIndex++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.routes[<span class=\"keyword\">this</span>.currentUrl]();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'指针:'</span>, <span class=\"keyword\">this</span>.currentIndex, <span class=\"string\">'history:'</span>, <span class=\"keyword\">this</span>.history);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isHistoryOp = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    goBack() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isHistoryOp = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.currentIndex = (<span class=\"keyword\">this</span>.currentIndex &lt;= <span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"keyword\">this</span>.currentIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">      location.hash = <span class=\"string\">`#<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.history[<span class=\"keyword\">this</span>.currentIndex]&#125;</span>`</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.routes[<span class=\"keyword\">this</span>.history[<span class=\"keyword\">this</span>.currentIndex]]();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    goForward () &#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.isHistoryOp = <span class=\"literal\">true</span>;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.currentIndex = (<span class=\"keyword\">this</span>.currentIndex &gt;= <span class=\"keyword\">this</span>.history.length <span class=\"number\">-1</span> ? <span class=\"keyword\">this</span>.history.length <span class=\"number\">-1</span> : <span class=\"keyword\">this</span>.currentIndex+<span class=\"number\">1</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">      location.hash = <span class=\"string\">`#<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.history[<span class=\"keyword\">this</span>.currentIndex]&#125;</span>`</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.routes[<span class=\"keyword\">this</span>.history[<span class=\"keyword\">this</span>.currentIndex]]();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"history路由\"><a href=\"#history路由\" class=\"headerlink\" title=\"history路由\"></a>history路由</h3><p>history 主要是以HTML5标准提供了History API供我们使用实现的，主要了解以下内容：</p>\n<ul>\n<li>history.pushState, 用于在浏览历史中添加历史记录,但是并不触发跳转</li>\n<li>history.replaceState, 用于修改浏览历史中当前纪录,而非添加记录,同样不触发跳转</li>\n<li>事件 popstate, 每当同一个文档的浏览历史（即history对象）出现变化时，就会触发popstate事件</li>\n<li>事件 popstate, 仅仅调用pushState方法或replaceState方法 ，并不会触发该事件，只有用户点击浏览器倒退按钮和前进按钮，或者使用 JavaScript 调用back、forward、go方法时才会触发</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Routers</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.routes = &#123;&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 在初始化时监听popstate事件</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._bindPopState();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 将路径和对应回调函数加入hashMap储存</span></span><br><span class=\"line\">  route(path, callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.routes[path] = callback || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 触发路由对应回调</span></span><br><span class=\"line\">  go(path) &#123;</span><br><span class=\"line\">    history.pushState(&#123;<span class=\"attr\">path</span>: path&#125;, <span class=\"literal\">null</span>, path);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.routes[path] &amp;&amp; <span class=\"keyword\">this</span>.routes[path]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 监听popstate事件</span></span><br><span class=\"line\">  _bindPopState() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'popstate'</span>, e =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> path = e.state &amp;&amp; e.state.path;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.routes[path] &amp;&amp; <span class=\"keyword\">this</span>.routes[path]();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"summary\"><a href=\"#summary\" class=\"headerlink\" title=\"summary\"></a>summary</h1><p>history 路由和 hash 路由比用了H5 所提供的 api url看上去更美观，但是两种路由其实是想起来核心的地方都是相似的。</p>\n<ul>\n<li>都是需要建立起路径与之对应的 callback 函数的映射</li>\n<li>都是通过事件监听来触发callback，然后根据触发事件的 hash 或者 path 的变化，找到与之对应的 callback</li>\n<li>hash 路由需要监听 hashchange 事件，history 需要监听 popstate 事件</li>\n</ul>"},{"title":"前端资源增量更新","date":"2018-04-08T13:51:21.000Z","_content":"# 前端资源增量更新\n\n随着前端的发展，大前端时代的到来，web 所承担数据量级越来越大，web 应用程序也越来越大，尤其现在 SPA 的各种框架大行其道，用户对体验的要求也越来越高，这对前端的性能要求也越来越高。\n\n<!--more-->\n\n## 问题\n假如说一个前端 web 应用的 JS 代码或者 HTML 文件 经过压缩之后依旧很大(假如说超过10M)，每次更新之后都需要用户重新加载 JS 是不可接受的，那么怎么样从工程的角度解决这种问题？\n\n- 首先工程的优化角度应该从 JS 等这类的静态资源来考虑，我们其实每次对代码改动经过压缩之后，只有很少一部分的代码发生变动，其他的大部分没有变。\n- 如果我们能找到 newFile 和 oldFile 的 diff 差异的信息，然后根据根据差异信息，更新 oldFile 的文件，不就不用从新加载体积很大的静态资源了？ \n- 有点类似 git 的 diff 机制，每次只记录文件的变动部分，然后更新原始文件，这个问题就解决掉了！\n- 那么问题来了，这个 diff 算法如何实现，其实自己手动实现也没啥复杂的，但是我还是去了全球最大的同性交友网站[here](https://github.com/kpdecker/jsdiff)找了个现成diff 算法。\n\n- \n先看一下这个diff算法：\n![](/images/diff-1.png)\n\n- 这个算法输出的信息有点多余，不方便后面的处理，我们对结果简单处理一下\n![](/images/diff-2.png)\n\n\n## 实现\n\n已经可以拿到 diff 的信息了，下面我们只需要是想一个 mergeDiff 的一个方法就可以了。\n\n`mergeDiff(oldFile, diffInfo) \n` \n大概形如这样。\n![](/images/diff-3.png)\n\n### 输出结果\n![](/images/diff-4.png)","source":"_posts/前端资源增量更新.md","raw":"---\ntitle: 前端资源增量更新\ndate: 2018-04-08 21:51:21\ncategories:\n- 前端工程化\n\n---\n# 前端资源增量更新\n\n随着前端的发展，大前端时代的到来，web 所承担数据量级越来越大，web 应用程序也越来越大，尤其现在 SPA 的各种框架大行其道，用户对体验的要求也越来越高，这对前端的性能要求也越来越高。\n\n<!--more-->\n\n## 问题\n假如说一个前端 web 应用的 JS 代码或者 HTML 文件 经过压缩之后依旧很大(假如说超过10M)，每次更新之后都需要用户重新加载 JS 是不可接受的，那么怎么样从工程的角度解决这种问题？\n\n- 首先工程的优化角度应该从 JS 等这类的静态资源来考虑，我们其实每次对代码改动经过压缩之后，只有很少一部分的代码发生变动，其他的大部分没有变。\n- 如果我们能找到 newFile 和 oldFile 的 diff 差异的信息，然后根据根据差异信息，更新 oldFile 的文件，不就不用从新加载体积很大的静态资源了？ \n- 有点类似 git 的 diff 机制，每次只记录文件的变动部分，然后更新原始文件，这个问题就解决掉了！\n- 那么问题来了，这个 diff 算法如何实现，其实自己手动实现也没啥复杂的，但是我还是去了全球最大的同性交友网站[here](https://github.com/kpdecker/jsdiff)找了个现成diff 算法。\n\n- \n先看一下这个diff算法：\n![](/images/diff-1.png)\n\n- 这个算法输出的信息有点多余，不方便后面的处理，我们对结果简单处理一下\n![](/images/diff-2.png)\n\n\n## 实现\n\n已经可以拿到 diff 的信息了，下面我们只需要是想一个 mergeDiff 的一个方法就可以了。\n\n`mergeDiff(oldFile, diffInfo) \n` \n大概形如这样。\n![](/images/diff-3.png)\n\n### 输出结果\n![](/images/diff-4.png)","slug":"前端资源增量更新","published":1,"updated":"2018-04-08T13:55:24.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg3qbjog0006y4vsx9rn7dp4","content":"<h1 id=\"前端资源增量更新\"><a href=\"#前端资源增量更新\" class=\"headerlink\" title=\"前端资源增量更新\"></a>前端资源增量更新</h1><p>随着前端的发展，大前端时代的到来，web 所承担数据量级越来越大，web 应用程序也越来越大，尤其现在 SPA 的各种框架大行其道，用户对体验的要求也越来越高，这对前端的性能要求也越来越高。</p>\n<a id=\"more\"></a>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>假如说一个前端 web 应用的 JS 代码或者 HTML 文件 经过压缩之后依旧很大(假如说超过10M)，每次更新之后都需要用户重新加载 JS 是不可接受的，那么怎么样从工程的角度解决这种问题？</p>\n<ul>\n<li>首先工程的优化角度应该从 JS 等这类的静态资源来考虑，我们其实每次对代码改动经过压缩之后，只有很少一部分的代码发生变动，其他的大部分没有变。</li>\n<li>如果我们能找到 newFile 和 oldFile 的 diff 差异的信息，然后根据根据差异信息，更新 oldFile 的文件，不就不用从新加载体积很大的静态资源了？ </li>\n<li>有点类似 git 的 diff 机制，每次只记录文件的变动部分，然后更新原始文件，这个问题就解决掉了！</li>\n<li><p>那么问题来了，这个 diff 算法如何实现，其实自己手动实现也没啥复杂的，但是我还是去了全球最大的同性交友网站<a href=\"https://github.com/kpdecker/jsdiff\" target=\"_blank\" rel=\"noopener\">here</a>找了个现成diff 算法。</p>\n</li>\n<li><p>先看一下这个diff算法：<br><img src=\"/images/diff-1.png\" alt=\"\"></p>\n</li>\n<li><p>这个算法输出的信息有点多余，不方便后面的处理，我们对结果简单处理一下<br><img src=\"/images/diff-2.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>已经可以拿到 diff 的信息了，下面我们只需要是想一个 mergeDiff 的一个方法就可以了。</p>\n<p><code>mergeDiff(oldFile, diffInfo)</code><br>大概形如这样。<br><img src=\"/images/diff-3.png\" alt=\"\"></p>\n<h3 id=\"输出结果\"><a href=\"#输出结果\" class=\"headerlink\" title=\"输出结果\"></a>输出结果</h3><p><img src=\"/images/diff-4.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前端资源增量更新\"><a href=\"#前端资源增量更新\" class=\"headerlink\" title=\"前端资源增量更新\"></a>前端资源增量更新</h1><p>随着前端的发展，大前端时代的到来，web 所承担数据量级越来越大，web 应用程序也越来越大，尤其现在 SPA 的各种框架大行其道，用户对体验的要求也越来越高，这对前端的性能要求也越来越高。</p>","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>假如说一个前端 web 应用的 JS 代码或者 HTML 文件 经过压缩之后依旧很大(假如说超过10M)，每次更新之后都需要用户重新加载 JS 是不可接受的，那么怎么样从工程的角度解决这种问题？</p>\n<ul>\n<li>首先工程的优化角度应该从 JS 等这类的静态资源来考虑，我们其实每次对代码改动经过压缩之后，只有很少一部分的代码发生变动，其他的大部分没有变。</li>\n<li>如果我们能找到 newFile 和 oldFile 的 diff 差异的信息，然后根据根据差异信息，更新 oldFile 的文件，不就不用从新加载体积很大的静态资源了？ </li>\n<li>有点类似 git 的 diff 机制，每次只记录文件的变动部分，然后更新原始文件，这个问题就解决掉了！</li>\n<li><p>那么问题来了，这个 diff 算法如何实现，其实自己手动实现也没啥复杂的，但是我还是去了全球最大的同性交友网站<a href=\"https://github.com/kpdecker/jsdiff\" target=\"_blank\" rel=\"noopener\">here</a>找了个现成diff 算法。</p>\n</li>\n<li><p>先看一下这个diff算法：<br><img src=\"/images/diff-1.png\" alt=\"\"></p>\n</li>\n<li><p>这个算法输出的信息有点多余，不方便后面的处理，我们对结果简单处理一下<br><img src=\"/images/diff-2.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>已经可以拿到 diff 的信息了，下面我们只需要是想一个 mergeDiff 的一个方法就可以了。</p>\n<p><code>mergeDiff(oldFile, diffInfo)</code><br>大概形如这样。<br><img src=\"/images/diff-3.png\" alt=\"\"></p>\n<h3 id=\"输出结果\"><a href=\"#输出结果\" class=\"headerlink\" title=\"输出结果\"></a>输出结果</h3><p><img src=\"/images/diff-4.png\" alt=\"\"></p>"},{"title":"Init Blog By Hexo","date":"2018-04-03T17:53:15.000Z","_content":"\n### Hexo博客搭建\n\n#### 关于搭建的流程\n- 首先在自己的 github 上创建仓库，http://yourgithubname.github.io；\n- 创建两个分支：master 与 dev；\n- 设置 dev 为默认分支（因为我们只需要手动管理这个分支上的 Hexo 网站文件）；\n- 使用git clone git@github.com:yourgithubname/yourgithubnamegithub.io 拷贝仓库；\n\n<!-- more -->\n\n-  在本地 http://yourgithubname.github.io 文件夹下通过 Git bash 依次执行 `npm install hexo`、`hexo init`、`npm install` 和 `npm install hexo-deployer-git`（此时当前分支应显示为 dev）;\n- 修改 _config.yml 中的 deploy 参数，分支应为 master；\n- 依次执行 `git add .`、`git commit -m \"...\"`、`git push origin hexo`提交网站相关的文件；\n- 执行hexo g -d生成网站并部署到 github 上。这样一来，在 github 上的 http://yourgithubname.github.io 仓库就有两个分支，一个 dev 分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。\n\n#### 搭建踩坑\n- 在你从 github `git clone` 下来的代码仓中执行 hexo init 时，会报错，说当前不是一个空文件，无法进行 hexo 初始化，你可以在一个新的空文件加重执行 hexo init，然后删除里面的 package-lock.json 和 node_modules 文件，然后把剩余的文件 copy 进站点根目录，然后执行 `npm i` 和 `npm install hexo-deployer-git`操作。\n\n- 在配置站点的 _config.yml 文件的 deploy 参数是应该这样配置：\n![deploy-params](/images/deploy.png)\n","source":"_posts/init-blog-by-hexo.md","raw":"---\ntitle: Init Blog By Hexo\ndate: 2018-04-04 01:53:15\ntags: \n- hexo\n---\n\n### Hexo博客搭建\n\n#### 关于搭建的流程\n- 首先在自己的 github 上创建仓库，http://yourgithubname.github.io；\n- 创建两个分支：master 与 dev；\n- 设置 dev 为默认分支（因为我们只需要手动管理这个分支上的 Hexo 网站文件）；\n- 使用git clone git@github.com:yourgithubname/yourgithubnamegithub.io 拷贝仓库；\n\n<!-- more -->\n\n-  在本地 http://yourgithubname.github.io 文件夹下通过 Git bash 依次执行 `npm install hexo`、`hexo init`、`npm install` 和 `npm install hexo-deployer-git`（此时当前分支应显示为 dev）;\n- 修改 _config.yml 中的 deploy 参数，分支应为 master；\n- 依次执行 `git add .`、`git commit -m \"...\"`、`git push origin hexo`提交网站相关的文件；\n- 执行hexo g -d生成网站并部署到 github 上。这样一来，在 github 上的 http://yourgithubname.github.io 仓库就有两个分支，一个 dev 分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。\n\n#### 搭建踩坑\n- 在你从 github `git clone` 下来的代码仓中执行 hexo init 时，会报错，说当前不是一个空文件，无法进行 hexo 初始化，你可以在一个新的空文件加重执行 hexo init，然后删除里面的 package-lock.json 和 node_modules 文件，然后把剩余的文件 copy 进站点根目录，然后执行 `npm i` 和 `npm install hexo-deployer-git`操作。\n\n- 在配置站点的 _config.yml 文件的 deploy 参数是应该这样配置：\n![deploy-params](/images/deploy.png)\n","slug":"init-blog-by-hexo","published":1,"updated":"2018-04-04T07:29:26.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg3qbjoh0007y4vs8pbq8s0g","content":"<h3 id=\"Hexo博客搭建\"><a href=\"#Hexo博客搭建\" class=\"headerlink\" title=\"Hexo博客搭建\"></a>Hexo博客搭建</h3><h4 id=\"关于搭建的流程\"><a href=\"#关于搭建的流程\" class=\"headerlink\" title=\"关于搭建的流程\"></a>关于搭建的流程</h4><ul>\n<li>首先在自己的 github 上创建仓库，<a href=\"http://yourgithubname.github.io；\" target=\"_blank\" rel=\"noopener\">http://yourgithubname.github.io；</a></li>\n<li>创建两个分支：master 与 dev；</li>\n<li>设置 dev 为默认分支（因为我们只需要手动管理这个分支上的 Hexo 网站文件）；</li>\n<li>使用git clone <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:yourgithubname/yourgithubnamegithub.io 拷贝仓库；</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>在本地 <a href=\"http://yourgithubname.github.io\" target=\"_blank\" rel=\"noopener\">http://yourgithubname.github.io</a> 文件夹下通过 Git bash 依次执行 <code>npm install hexo</code>、<code>hexo init</code>、<code>npm install</code> 和 <code>npm install hexo-deployer-git</code>（此时当前分支应显示为 dev）;</li>\n<li>修改 _config.yml 中的 deploy 参数，分支应为 master；</li>\n<li>依次执行 <code>git add .</code>、<code>git commit -m &quot;...&quot;</code>、<code>git push origin hexo</code>提交网站相关的文件；</li>\n<li>执行hexo g -d生成网站并部署到 github 上。这样一来，在 github 上的 <a href=\"http://yourgithubname.github.io\" target=\"_blank\" rel=\"noopener\">http://yourgithubname.github.io</a> 仓库就有两个分支，一个 dev 分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。</li>\n</ul>\n<h4 id=\"搭建踩坑\"><a href=\"#搭建踩坑\" class=\"headerlink\" title=\"搭建踩坑\"></a>搭建踩坑</h4><ul>\n<li><p>在你从 github <code>git clone</code> 下来的代码仓中执行 hexo init 时，会报错，说当前不是一个空文件，无法进行 hexo 初始化，你可以在一个新的空文件加重执行 hexo init，然后删除里面的 package-lock.json 和 node_modules 文件，然后把剩余的文件 copy 进站点根目录，然后执行 <code>npm i</code> 和 <code>npm install hexo-deployer-git</code>操作。</p>\n</li>\n<li><p>在配置站点的 _config.yml 文件的 deploy 参数是应该这样配置：<br><img src=\"/images/deploy.png\" alt=\"deploy-params\"></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"Hexo博客搭建\"><a href=\"#Hexo博客搭建\" class=\"headerlink\" title=\"Hexo博客搭建\"></a>Hexo博客搭建</h3><h4 id=\"关于搭建的流程\"><a href=\"#关于搭建的流程\" class=\"headerlink\" title=\"关于搭建的流程\"></a>关于搭建的流程</h4><ul>\n<li>首先在自己的 github 上创建仓库，<a href=\"http://yourgithubname.github.io；\" target=\"_blank\" rel=\"noopener\">http://yourgithubname.github.io；</a></li>\n<li>创建两个分支：master 与 dev；</li>\n<li>设置 dev 为默认分支（因为我们只需要手动管理这个分支上的 Hexo 网站文件）；</li>\n<li>使用git clone <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:yourgithubname/yourgithubnamegithub.io 拷贝仓库；</li>\n</ul>","more":"<ul>\n<li>在本地 <a href=\"http://yourgithubname.github.io\" target=\"_blank\" rel=\"noopener\">http://yourgithubname.github.io</a> 文件夹下通过 Git bash 依次执行 <code>npm install hexo</code>、<code>hexo init</code>、<code>npm install</code> 和 <code>npm install hexo-deployer-git</code>（此时当前分支应显示为 dev）;</li>\n<li>修改 _config.yml 中的 deploy 参数，分支应为 master；</li>\n<li>依次执行 <code>git add .</code>、<code>git commit -m &quot;...&quot;</code>、<code>git push origin hexo</code>提交网站相关的文件；</li>\n<li>执行hexo g -d生成网站并部署到 github 上。这样一来，在 github 上的 <a href=\"http://yourgithubname.github.io\" target=\"_blank\" rel=\"noopener\">http://yourgithubname.github.io</a> 仓库就有两个分支，一个 dev 分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。</li>\n</ul>\n<h4 id=\"搭建踩坑\"><a href=\"#搭建踩坑\" class=\"headerlink\" title=\"搭建踩坑\"></a>搭建踩坑</h4><ul>\n<li><p>在你从 github <code>git clone</code> 下来的代码仓中执行 hexo init 时，会报错，说当前不是一个空文件，无法进行 hexo 初始化，你可以在一个新的空文件加重执行 hexo init，然后删除里面的 package-lock.json 和 node_modules 文件，然后把剩余的文件 copy 进站点根目录，然后执行 <code>npm i</code> 和 <code>npm install hexo-deployer-git</code>操作。</p>\n</li>\n<li><p>在配置站点的 _config.yml 文件的 deploy 参数是应该这样配置：<br><img src=\"/images/deploy.png\" alt=\"deploy-params\"></p>\n</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjg3qbjo60000y4vs8f3uizjm","category_id":"cjg3qbjoc0003y4vsruh066xb","_id":"cjg3qbjok000cy4vsktfh40a2"},{"post_id":"cjg3qbjoe0005y4vs9vwbrsar","category_id":"cjg3qbjoc0003y4vsruh066xb","_id":"cjg3qbjol000fy4vsgdpz2lbl"},{"post_id":"cjg3qbjog0006y4vsx9rn7dp4","category_id":"cjg3qbjok000by4vs2l26wv0a","_id":"cjg3qbjom000iy4vs0p4lhbpp"}],"PostTag":[{"post_id":"cjg3qbjo60000y4vs8f3uizjm","tag_id":"cjg3qbjoe0004y4vsna0l0rxf","_id":"cjg3qbjoj000ay4vsfd6isnch"},{"post_id":"cjg3qbjoa0002y4vserr4n7z9","tag_id":"cjg3qbjoi0009y4vspldwzl2j","_id":"cjg3qbjol000ey4vsxp52j6k0"},{"post_id":"cjg3qbjoe0005y4vs9vwbrsar","tag_id":"cjg3qbjoe0004y4vsna0l0rxf","_id":"cjg3qbjom000hy4vs8q5i58u9"},{"post_id":"cjg3qbjoh0007y4vs8pbq8s0g","tag_id":"cjg3qbjoi0009y4vspldwzl2j","_id":"cjg3qbjom000jy4vsfhkfl7fr"}],"Tag":[{"name":"ES6","_id":"cjg3qbjoe0004y4vsna0l0rxf"},{"name":"hexo","_id":"cjg3qbjoi0009y4vspldwzl2j"}]}}